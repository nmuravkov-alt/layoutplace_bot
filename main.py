# main.py
import asyncio
import logging
import os
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from html import escape as html_escape
import re

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandObject
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest

from storage.db import (
    init_db,
    enqueue as db_enqueue,
    get_oldest,
    list_queue as db_list_queue,
    delete_by_id,
    find_similar_ids,
    bulk_delete,
    is_duplicate,
    job_create,
)

# ---------------- –ö–æ–Ω—Ñ–∏–≥ ----------------
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
CHANNEL_ID = os.getenv("CHANNEL_ID", "").strip()  # @username –∏–ª–∏ -100...
ADMINS_RAW = os.getenv("ADMINS", "").strip()
TZ = os.getenv("TZ", "Europe/Moscow")
POST_REPORT_TO_CHANNEL = os.getenv("POST_REPORT_TO_CHANNEL", "0").strip() == "1"

tz = ZoneInfo(TZ)
ADMINS: set[int] = set(int(x.strip()) for x in ADMINS_RAW.replace(";", ",").split(",") if x.strip().lstrip("-").isdigit())

logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(name)s | %(message)s")
log = logging.getLogger("layoutplace_bot")

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# ---------------- –ê–Ω—Ç–∏—Å–ø–∞–º/—Ç—Ä–∞–Ω—Å–ª–∏—Ç ----------------
FORBIDDEN = {"–æ–ø—Ç", "–æ–ø—Ç–æ–º", "—Å–∫–∏–¥–∫–∞", "–ø–æ–¥–ø–∏—Å—á–∏–∫–∏", "—Å—Ç–∞–≤–∫–∏", "–∫–∞–∑–∏–Ω–æ", "–≤–∑–∞–∏–º–∫–∞"}

RU2LAT = str.maketrans({
    "–∞":"a","–±":"b","–≤":"v","–≥":"g","–¥":"d","–µ":"e","—ë":"e","–∂":"zh","–∑":"z","–∏":"i","–π":"y",
    "–∫":"k","–ª":"l","–º":"m","–Ω":"n","–æ":"o","–ø":"p","—Ä":"r","—Å":"s","—Ç":"t","—É":"u","—Ñ":"f",
    "—Ö":"h","—Ü":"ts","—á":"ch","—à":"sh","—â":"sch","—ã":"y","—ç":"e","—é":"yu","—è":"ya",
    "—ä":"", "—å":""
})

def translit_hashtag(s: str) -> str:
    s = s.strip().lower()
    return re.sub(r"[^a-z0-9]+", "", s.translate(RU2LAT))

# ---------------- –®–∞–±–ª–æ–Ω + –ø–∞—Ä—Å–µ—Ä ----------------
SIZE_TOKENS = {"xs","s","m","l","xl","xxl","xxxl","30","31","32","33","34","36","38","40","42","44","46","48","50","52","54"}
PRICE_RE = re.compile(r"(\d[\d\s]{2,})\s*(?:‚ÇΩ|—Ä—É–±|—Ä|rub|rub\.?)?", re.I)

def parse_struct(text: str):
    """
    –ü—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å brand/size/price/city/desc –∏–∑ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
    –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª—é—á–µ–π: –±—Ä–µ–Ω–¥/brand, —Ä–∞–∑–º–µ—Ä/size, —Ü–µ–Ω–∞/price, –≥–æ—Ä–æ–¥/city, –æ–ø–∏—Å–∞–Ω–∏–µ/desc.
    –ï—Å–ª–∏ –∫–ª—é—á–µ–π –Ω–µ—Ç ‚Äî –ø—ã—Ç–∞–µ–º—Å—è —É–≥–∞–¥–∞—Ç—å: –ø–µ—Ä–≤–∞—è ¬´—Å–ª–æ–≤–µ—Å–Ω–∞—è¬ª ‚Äî –±—Ä–µ–Ω–¥, —Ç–æ–∫–µ–Ω –∏–∑ SIZE_TOKENS ‚Äî —Ä–∞–∑–º–µ—Ä,
    —á–∏—Å–ª–æ ‚Äî —Ü–µ–Ω–∞, —Å–ª–æ–≤–æ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã –≤ –∫–æ–Ω—Ü–µ ‚Äî –≥–æ—Ä–æ–¥.
    """
    raw = text.strip()
    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
    lines = re.split(r"[,\n|;]+", raw)

    data = {"brand":"", "size":"", "price":"","city":"", "desc":""}

    # 1) –ø–æ –∫–ª—é—á–∞–º
    for part in lines:
        p = part.strip()
        low = p.lower()
        if not p:
            continue
        for key, aliases in {
            "brand": ["–±—Ä–µ–Ω–¥", "brand"],
            "size": ["—Ä–∞–∑–º–µ—Ä", "size"],
            "price":["—Ü–µ–Ω–∞","price"],
            "city": ["–≥–æ—Ä–æ–¥","city","–≥."],
            "desc": ["–æ–ø–∏—Å–∞–Ω–∏–µ","desc","–æ–ø–∏—Å"],
        }.items():
            for a in aliases:
                if low.startswith(a + ":") or low.startswith(a+" "):
                    data[key] = p.split(":",1)[-1].strip()
                    break

    # 2) —ç–≤—Ä–∏—Å—Ç–∏–∫–∏
    tokens = [t.strip() for t in lines if t.strip()]

    # –±—Ä–µ–Ω–¥ ‚Äî –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ
    if not data["brand"] and tokens:
        data["brand"] = tokens[0].split()[0].title()

    # —Ä–∞–∑–º–µ—Ä ‚Äî –∏–∑ —Ç–æ–∫–µ–Ω–æ–≤
    if not data["size"]:
        for t in tokens:
            tt = t.lower().strip()
            if tt in SIZE_TOKENS:
                data["size"] = tt.upper()
                break
            # –≤–∞—Ä–∏–∞–Ω—Ç "–†–∞–∑–º–µ—Ä L"
            m = re.search(r"(?:—Ä–∞–∑–º–µ—Ä|size)\s*([XSML\d]{1,4})", tt, re.I)
            if m:
                data["size"] = m.group(1).upper()
                break

    # —Ü–µ–Ω–∞ ‚Äî –∏—â–µ–º —á–∏—Å–ª–æ
    if not data["price"]:
        m = PRICE_RE.search(raw)
        if m:
            data["price"] = re.sub(r"\s+","", m.group(1))

    # –≥–æ—Ä–æ–¥ ‚Äî –ø–æ—Å–ª–µ–¥–Ω–µ–µ "—Å–ª–æ–≤–æ —Å –±–æ–ª—å—à–æ–π" –∏–ª–∏ –ø–æ—Å–ª–µ "–≥."
    if not data["city"]:
        m = re.search(r"(?:–≥\.|–≥–æ—Ä–æ–¥)\s*([A-Za-z–ê-–Ø–∞-—è\- ]{2,})", raw, re.I)
        if m:
            data["city"] = m.group(1).strip().title()
        else:
            words = [w for w in re.split(r"[\n,;]+", raw) if w.strip()]
            if words:
                tail = words[-1].strip()
                if len(tail.split())<=3 and any(ch.isalpha() for ch in tail):
                    data["city"] = tail.title()

    # –æ–ø–∏—Å–∞–Ω–∏–µ ‚Äî –≤–µ—Å—å —Ç–µ–∫—Å—Ç –º–∏–Ω—É—Å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫—É—Å–∫–∏ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
    data["desc"] = raw

    return data

def format_post(d):
    brand = d.get("brand","").strip()
    size  = d.get("size","").strip().upper()
    price = d.get("price","").strip()
    city  = d.get("city","").strip().title()
    desc  = d.get("desc","").strip()

    # –∞–≤—Ç–æ-—Ö—ç—à—Ç–µ–≥–∏ (–ª–∞—Ç–∏–Ω–∏—Ü–∞)
    tags = []
    if brand:
        tags.append("#" + translit_hashtag(brand))
    if size:
        tags.append("#" + translit_hashtag(size))
    if city:
        tags.append("#" + translit_hashtag(city))

    price_line = f"üí∏ –¶–µ–Ω–∞: {price}‚ÇΩ" if price else "üí∏ –¶–µ–Ω–∞: ‚Äî"
    size_line  = f"üìè –†–∞–∑–º–µ—Ä: {size}" if size else "üìè –†–∞–∑–º–µ—Ä: ‚Äî"
    brand_line = f"üëï –ë—Ä–µ–Ω–¥: {brand}" if brand else "üëï –ë—Ä–µ–Ω–¥: ‚Äî"
    city_line  = f"üìç –ì–æ—Ä–æ–¥: {city}" if city else "üìç –ì–æ—Ä–æ–¥: ‚Äî"

    body = (
        f"{brand_line}\n"
        f"{size_line}\n"
        f"{price_line}\n"
        f"{city_line}\n‚Äî\n"
        f"{desc}\n"
        f"{' '.join(tags)}"
    ).strip()
    return body

# ---------------- –£—Ç–∏–ª–∏—Ç—ã ----------------
def _is_admin(m: Message | CallbackQuery) -> bool:
    uid = (m.from_user.id if m.from_user else None) if m else None
    return bool(uid and uid in ADMINS)

def _now_str() -> str:
    return datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S")

async def safe_send_channel(text: str):
    try:
        await bot.send_message(CHANNEL_ID, text, disable_web_page_preview=False)
    except TelegramBadRequest:
        await bot.send_message(CHANNEL_ID, html_escape(text), parse_mode=None, disable_web_page_preview=False)

async def _notify_admins(text: str):
    for uid in ADMINS:
        try:
            await bot.send_message(uid, text, disable_web_page_preview=True)
        except Exception:
            pass

# ---------------- –ö–æ–º–∞–Ω–¥—ã ----------------
@dp.message(Command("start"))
async def cmd_start(m: Message):
    help_text = (
        "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã):</b>\n"
        "/enqueue &lt;—Ç–µ–∫—Å—Ç&gt; ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (—Å –∞–≤—Ç–æ-—à–∞–±–ª–æ–Ω–æ–º, —Ö—ç—à—Ç–µ–≥–∞–º–∏ –∏ –∞–Ω—Ç–∏—Å–ø–∞–º–æ–º)\n"
        "/queue ‚Äî —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏\n"
        "/queue_list [N] ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å N –±–ª–∏–∂–∞–π—à–∏—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)\n"
        "/delete &lt;id&gt; ‚Äî —É–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ ID\n"
        "/post_oldest ‚Äî –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ –∏ —É–¥–∞–ª–∏—Ç—å –ø–æ—Ö–æ–∂–∏–µ\n"
        "/post_at HH:MM ‚Äî –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é <i>—Å–∞–º–æ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ</i> –Ω–∞ –≤—Ä–µ–º—è (–ú–°–ö)\n"
        "/now ‚Äî —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞\n"
    )
    await m.answer(help_text)

@dp.message(Command("myid"))
async def cmd_myid(m: Message):
    await m.answer(f"–¢–≤–æ–π Telegram ID: <code>{m.from_user.id}</code>")

@dp.message(Command("now"))
async def cmd_now(m: Message):
    await m.answer(f"<b>–°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è:</b> {_now_str()} ({TZ})")

@dp.message(Command("enqueue"))
async def cmd_enqueue(m: Message, command: CommandObject):
    if not _is_admin(m):
        return await m.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
    raw = (command.args or "").strip()
    if not raw:
        return await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /enqueue &lt;—Ç–µ–∫—Å—Ç&gt;")

    # –∞–Ω—Ç–∏—Å–ø–∞–º
    low = raw.lower()
    if any(word in low for word in FORBIDDEN):
        return await m.answer("üö´ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–Ω—Ç–∏—Å–ø–∞–º–æ–º.")

    # –ø–∞—Ä—Å–∏–Ω–≥ + —à–∞–±–ª–æ–Ω
    data = parse_struct(raw)
    formatted = format_post(data)

    # –∞–Ω—Ç–∏-–¥—É–±–ª—å
    dup_id = is_duplicate(formatted)
    if dup_id:
        return await m.answer(f"‚ö†Ô∏è –¢–∞–∫–æ–π –ø–æ—Å—Ç —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ (ID: <code>{dup_id}</code>).")

    ad_id = db_enqueue(formatted)
    await m.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å. ID: <code>{ad_id}</code>")

@dp.message(Command("queue"))
async def cmd_queue(m: Message):
    if not _is_admin(m):
        return await m.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
    count = get_oldest(count_only=True)
    await m.answer(f"üì¶ –í –æ—á–µ—Ä–µ–¥–∏: <b>{count}</b>")

@dp.message(Command("queue_list"))
async def cmd_queue_list(m: Message, command: CommandObject):
    if not _is_admin(m):
        return await m.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
    try:
        n = int((command.args or "").strip() or "10")
        n = max(1, min(50, n))
    except ValueError:
        n = 10
    items = db_list_queue(n)
    if not items:
        return await m.answer("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
    lines = []
    for ad_id, text, created_at in items:
        when = datetime.fromtimestamp(created_at, tz).strftime("%d.%m %H:%M")
        preview = (text[:80] + "‚Ä¶") if len(text) > 80 else text
        lines.append(f"<code>{ad_id}</code> ‚Ä¢ {when} ‚Ä¢ {html_escape(preview)}")
    await m.answer("–ü–µ—Ä–≤—ã–µ –≤ –æ—á–µ—Ä–µ–¥–∏:\n" + "\n".join(lines))

@dp.message(Command("delete"))
async def cmd_delete(m: Message, command: CommandObject):
    if not _is_admin(m):
        return await m.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
    arg = (command.args or "").strip()
    if not arg or not arg.isdigit():
        return await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete &lt;id&gt;")
    ad_id = int(arg)
    removed = delete_by_id(ad_id)
    if removed:
        await m.answer(f"üóë –£–¥–∞–ª–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ <code>{ad_id}</code> –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")
    else:
        await m.answer("–ù–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–µ–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç).")

@dp.message(Command("post_oldest"))
async def cmd_post_oldest(m: Message):
    if not _is_admin(m):
        return await m.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
    row = get_oldest()
    if not row:
        return await m.answer("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
    ad_id, text = row

    await safe_send_channel(text)

    similar = find_similar_ids(ad_id, threshold=0.88)
    removed = bulk_delete([ad_id] + similar)

    now_h = _now_str()
    await _notify_admins(
        f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ ({now_h}). ID: <code>{ad_id}</code>. "
        f"–£–¥–∞–ª–µ–Ω–æ –ø–æ—Ö–æ–∂–∏—Ö (–≤–∫–ª—é—á–∞—è –∏—Å—Ö–æ–¥–Ω—ã–π): <b>{removed}</b>."
    )
    if POST_REPORT_TO_CHANNEL:
        await safe_send_channel(f"‚ÑπÔ∏è –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω. ID: {ad_id}. –£–¥–∞–ª–µ–Ω–æ –ø–æ—Ö–æ–∂–∏—Ö: {removed}.")
    await m.answer("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª.\n" f"üóë –£–¥–∞–ª–µ–Ω–æ (–≤–º–µ—Å—Ç–µ —Å –ø–æ—Ö–æ–∂–∏–º–∏): <b>{removed}</b>")

@dp.message(Command("post_at"))
async def cmd_post_at(m: Message, command: CommandObject):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é –°–ê–ú–û–ì–û –°–¢–ê–†–û–ì–û –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ HH:MM –ø–æ –ú–°–ö"""
    if not _is_admin(m):
        return await m.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
    arg = (command.args or "").strip()
    if not re.match(r"^\d{1,2}:\d{2}$", arg):
        return await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /post_at HH:MM (–ø–æ –ú–°–ö)")

    hh, mm = map(int, arg.split(":"))
    if hh < 0 or hh > 23 or mm < 0 or mm > 59:
        return await m.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä: /post_at 18:30")

    row = get_oldest()
    if not row:
        return await m.answer("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –Ω–µ—á–µ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.")

    ad_id, _ = row
    now = datetime.now(tz)
    run_at = now.replace(hour=hh, minute=mm, second=0, microsecond=0)
    if run_at <= now:
        run_at += timedelta(days=1)

    job_id = job_create(ad_id, int(run_at.timestamp()))
    await m.answer(
        f"üóì –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ID <code>{ad_id}</code> –Ω–∞ {run_at.strftime('%Y-%m-%d %H:%M')} ({TZ}).\n"
        f"Job: <code>{job_id}</code>"
    )

# ---------------- Callback ¬´–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å¬ª ----------------
@dp.callback_query(F.data == "postnow")
async def cb_postnow(q: CallbackQuery):
    if not _is_admin(q):
        return await q.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)

    row = get_oldest()
    if not row:
        await q.answer("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.", show_alert=True)
        return
    ad_id, text = row

    await safe_send_channel(text)
    similar = find_similar_ids(ad_id, threshold=0.88)
    removed = bulk_delete([ad_id] + similar)

    now_h = _now_str()
    await _notify_admins(
        f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å¬ª ({now_h}). "
        f"ID: <code>{ad_id}</code>. –£–¥–∞–ª–µ–Ω–æ –ø–æ—Ö–æ–∂–∏—Ö: <b>{removed}</b>."
    )
    if POST_REPORT_TO_CHANNEL:
        await safe_send_channel(f"‚ÑπÔ∏è –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω. ID: {ad_id}. –£–¥–∞–ª–µ–Ω–æ –ø–æ—Ö–æ–∂–∏—Ö: {removed}.")

    try:
        await q.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass
    await q.answer("–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.", show_alert=False)

# ---------------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ----------------
async def main():
    init_db()
    log.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –¥–ª—è %s (TZ=%s)", CHANNEL_ID, TZ)
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

if __name__ == "__main__":
    asyncio.run(main())
