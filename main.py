# main.py
import asyncio
import logging
import os
from datetime import datetime

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode, ChatType
from aiogram.filters import Command, CommandObject
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message

from storage.db import (
    init_db,
    enqueue as db_enqueue,
    get_oldest,
    delete_by_id,
    find_similar_ids,
    bulk_delete,
)

# ---------------- –ö–æ–Ω—Ñ–∏–≥ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ----------------

BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
CHANNEL_ID = os.getenv("CHANNEL_ID", "").strip()
ADMINS_RAW = os.getenv("ADMINS", "").strip()
TZ = os.getenv("TZ", "Europe/Moscow")

# –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –≤ int
ADMINS = []
for a in ADMINS_RAW.split(","):
    a = a.strip()
    if not a:
        continue
    try:
        ADMINS.append(int(a))
    except ValueError:
        pass

# ---------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è ----------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("layoutplace_bot")

# ---------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ----------------
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# ---------------- –ö–æ–º–∞–Ω–¥—ã ----------------

@dp.message(Command("start"))
async def cmd_start(m: Message):
    help_text = (
        "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/myid ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π Telegram ID\n"
        "/enqueue <—Ç–µ–∫—Å—Ç> ‚Äì –ø–æ–ª–æ–∂–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å\n"
        "/queue ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏\n"
        "/post_oldest ‚Äì –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ –∏ —É–¥–∞–ª–∏—Ç—å –ø–æ—Ö–æ–∂–∏–µ\n"
        "/now ‚Äì —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞"
    )
    await m.answer(help_text)


@dp.message(Command("myid"))
async def cmd_myid(m: Message):
    await m.answer(f"–¢–≤–æ–π Telegram ID: <code>{m.from_user.id}</code>")


@dp.message(Command("now"))
async def cmd_now(m: Message):
    now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    await m.answer(f"<b>–°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è:</b> {now_str}")


@dp.message(Command("enqueue"))
async def cmd_enqueue(m: Message, command: CommandObject):
    text = command.args
    if not text:
        await m.answer("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /enqueue <—Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è>")
        return

    ad_id = db_enqueue(text)
    await m.answer(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å (ID: <code>{ad_id}</code>)")


@dp.message(Command("queue"))
async def cmd_queue(m: Message):
    oldest = get_oldest()
    if not oldest:
        await m.answer("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
        return

    await m.answer("–í –æ—á–µ—Ä–µ–¥–∏ –µ—Å—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∏—Ç—å.")


@dp.message(Command("post_oldest"))
async def cmd_post_oldest(m: Message):
    oldest = get_oldest()
    if not oldest:
        await m.answer("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
        return

    ad_id, text = oldest

    # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
    await bot.send_message(CHANNEL_ID, text)

    # –£–¥–∞–ª—è–µ–º –ø–æ—Ö–æ–∂–∏–µ + —Å–∞–º –ø–æ—Å—Ç
    similar = find_similar_ids(ad_id, threshold=0.88)
    removed = bulk_delete([ad_id] + similar)

    await m.answer(
        f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ <code>{ad_id}</code> –≤ –∫–∞–Ω–∞–ª.\n"
        f"üóë –£–¥–∞–ª–µ–Ω–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: <b>{removed}</b> (–≤–∫–ª—é—á–∞—è –ø–æ—Ö–æ–∂–∏–µ)."
    )


# ---------------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ----------------

async def main():
    await init_db()
    log.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –¥–ª—è @%s (TZ=%s)", CHANNEL_ID.strip("@"), TZ)
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

if __name__ == "__main__":
    asyncio.run(main())
