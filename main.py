import os
import asyncio
import json
import logging
import pytz
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.exceptions import TelegramConflictError, TelegramBadRequest

# ---------------- –ù–ê–°–¢–†–û–ô–ö–ò ----------------

TOKEN = os.getenv("TOKEN", "")
if not TOKEN or ":" not in TOKEN:
    raise RuntimeError("ENV TOKEN –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π")

ADMINS = [int(x) for x in os.getenv("ADMINS", "").split(",") if x]
CHANNEL_ID = int(os.getenv("CHANNEL_ID", "-1001758490510"))
CONTACT = os.getenv("CONTACT", "@layoutplacebuy")
ALBUM_URL = os.getenv("ALBUM_URL", "")
POST_TIMES = [t.strip() for t in os.getenv("POST_TIMES", "12:00,16:00,20:00").split(",")]
PREVIEW_BEFORE_MIN = int(os.getenv("PREVIEW_BEFORE_MIN", "45"))
TZ = os.getenv("TZ", "Europe/Moscow")

# ---------------- –õ–û–ì–ò ----------------
logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(name)s:%(message)s")
log = logging.getLogger("layoutplace_bot")

# ---------------- –û–ë–™–ï–ö–¢–´ ----------------
bot = Bot(TOKEN, parse_mode="HTML")
dp = Dispatcher()
tz = pytz.timezone(TZ)

# –û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏ (sqlite –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ)
queue = []


# ---------------- –£–¢–ò–õ–ò–¢–´ ----------------
def now_tz() -> datetime:
    return datetime.now(tz)


def normalize_text(text: str) -> str:
    """–ü—Ä–∏–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –∫ –Ω—É–∂–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É."""
    text = text.strip()

    if not text:
        return ""

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ
    footer = f"\n\n#—Ç–æ–ª—Å—Ç–æ–≤–∫–∏\n–û–±—â–∏–π –∞–ª—å–±–æ–º: {ALBUM_URL}\n–ü–æ–∫—É–ø–∫–∞/–≤–æ–ø—Ä–æ—Å—ã: {CONTACT}"
    if footer not in text:
        text = f"{text}{footer}"

    return text


# ---------------- –§–£–ù–ö–¶–ò–ò ----------------
async def send_preview():
    for admin in ADMINS:
        try:
            await bot.send_message(admin, "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø–æ—Å—Ç–∏–Ω–≥ —á–µ—Ä–µ–∑ 45 –º–∏–Ω—É—Ç.")
        except Exception as e:
            log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–≤—å—é –∞–¥–º–∏–Ω—É {admin}: {e}")


async def post_oldest():
    """–ü—É–±–ª–∏–∫—É–µ–º –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
    if not queue:
        log.info("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –Ω–µ—á–µ–≥–æ –ø–æ—Å—Ç–∏—Ç—å.")
        return False

    item = queue.pop(0)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞, –µ—Å–ª–∏ –±—ã–ª–æ
    try:
        await bot.delete_message(CHANNEL_ID, item.get("last_msg_id"))
    except TelegramBadRequest:
        pass
    except Exception as e:
        log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    caption = normalize_text(item["caption"])

    try:
        if item["media"]:
            media = [
                types.InputMediaPhoto(media=ph, caption=caption if i == 0 else None)
                for i, ph in enumerate(item["media"])
            ]
            msgs = await bot.send_media_group(CHANNEL_ID, media)
            log.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–ª—å–±–æ–º –≤ –∫–∞–Ω–∞–ª {CHANNEL_ID}")
            item["last_msg_id"] = msgs[0].message_id
        else:
            msg = await bot.send_message(CHANNEL_ID, caption)
            item["last_msg_id"] = msg.message_id
    except Exception as e:
        log.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–∏–Ω–≥–µ: {e}")
        return False

    return True


async def scheduler_loop():
    log.info(f"Scheduler TZ={TZ}, times={POST_TIMES}, preview_before={PREVIEW_BEFORE_MIN} –º–∏–Ω")

    while True:
        try:
            now = now_tz()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Å–ª–æ—Ç –ø–æ—Å—Ç–∏–Ω–≥–∞
            slots = []
            for t in POST_TIMES:
                h, m = map(int, t.split(":"))
                dt = tz.localize(datetime(now.year, now.month, now.day, h, m))
                if dt < now:
                    dt += timedelta(days=1)
                slots.append(dt)

            next_slot = min(slots)
            preview_time = next_slot - timedelta(minutes=PREVIEW_BEFORE_MIN)

            sleep_preview = (preview_time - now_tz()).total_seconds()
            if sleep_preview > 0:
                await asyncio.sleep(sleep_preview)
                await send_preview()

            sleep_post = (next_slot - now_tz()).total_seconds()
            if sleep_post > 0:
                await asyncio.sleep(sleep_post)
                await post_oldest()

        except asyncio.CancelledError:
            log.info("Scheduler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break
        except Exception as e:
            log.exception(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            await asyncio.sleep(5)


# ---------------- –ö–û–ú–ê–ù–î–´ ----------------
@dp.message(Command("start"))
async def cmd_start(m: types.Message):
    await m.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n"
                   "–ü–æ—Å—Ç—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
                   "–ö–æ–º–∞–Ω–¥—ã:\n"
                   "‚Ä¢ /add_post ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤ –æ—á–µ—Ä–µ–¥—å\n"
                   "‚Ä¢ /post_oldest ‚Äî –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–π –ø–æ—Å—Ç")


@dp.message(Command("add_post"))
async def cmd_add_post(m: types.Message):
    """–î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–π –ø–æ—Å—Ç (—Ç–µ–∫—Å—Ç + —Ñ–æ—Ç–æ) –≤ –æ—á–µ—Ä–µ–¥—å"""
    if not m.reply_to_message:
        await m.answer("–ü–µ—Ä–µ—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å—Ç–æ–º –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ–≥–æ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π.")
        return

    r = m.reply_to_message

    media = []
    caption = ""
    if r.photo:
        media.append(r.photo[-1].file_id)
        caption = r.caption or ""
    elif r.text:
        caption = r.text
    elif r.media_group_id:
        media.append(r.photo[-1].file_id)

    queue.append({
        "media": media,
        "caption": caption,
        "created_at": now_tz().isoformat(),
    })

    await m.answer(f"–ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å. –°–µ–π—á–∞—Å {len(queue)} –≤ –æ—á–µ—Ä–µ–¥–∏.")


@dp.message(Command("post_oldest"))
async def cmd_post_oldest(m: types.Message):
    ok = await post_oldest()
    await m.answer("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω." if ok else "‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")


# ---------------- –•–£–ö–ò ----------------
_scheduler_task = None

async def on_startup():
    global _scheduler_task
    try:
        await bot.delete_webhook(drop_pending_updates=True)
    except Exception:
        pass
    if not _scheduler_task or _scheduler_task.done():
        _scheduler_task = asyncio.create_task(scheduler_loop())
        log.info("Scheduler –∑–∞–ø—É—â–µ–Ω.")

async def on_shutdown():
    global _scheduler_task
    if _scheduler_task and not _scheduler_task.done():
        _scheduler_task.cancel()
        try:
            await _scheduler_task
        except asyncio.CancelledError:
            pass
        log.info("Scheduler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


# ---------------- –¢–û–ß–ö–ê –í–•–û–î–ê ----------------
async def run_bot():
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    log.info("üöÄ –°—Ç–∞—Ä—Ç—É–µ–º Layoutplace Bot...")

    backoff = 1.0
    while True:
        try:
            await dp.start_polling(bot, allowed_updates=None)
            break
        except TelegramConflictError:
            log.error("‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç polling ‚Äî –±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≥–¥–µ-—Ç–æ. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
            try:
                await bot.delete_webhook(drop_pending_updates=True)
            except Exception:
                pass
            await asyncio.sleep(backoff)
            backoff = min(backoff * 1.5, 10.0)
        except Exception as e:
            log.exception(f"Polling error: {e}")
            await asyncio.sleep(3)
