# main.py
import asyncio
import logging
import os
from datetime import datetime
import re

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandObject
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from aiogram.exceptions import TelegramBadRequest

from storage.db import (
    init_db,
    enqueue as db_enqueue,
    get_oldest,
    delete_by_id,
    find_similar_ids,
    bulk_delete,
)

# ==================== –ö–æ–Ω—Ñ–∏–≥ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ====================

BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
CHANNEL_ID = os.getenv("CHANNEL_ID", "").strip()
ADMINS_RAW = os.getenv("ADMINS", "").strip()  # id —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
TZ = os.getenv("TZ", "Europe/Moscow")

# ==================== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ====================

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ==================== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ====================

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# ==================== –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ ====================

ALLOWED_TAGS = {"b", "strong", "i", "em", "u", "s", "strike", "del", "tg-spoiler", "a", "code", "pre"}

def clean_html_tags(text: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç —Ç–µ–≥–∏, –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ Telegram."""
    def repl(m):
        tag = m.group(1).lower()
        if tag in ALLOWED_TAGS or tag.startswith("a "):
            return m.group(0)
        return ""
    return re.sub(r"</?([^ >/]+)[^>]*>", repl, text)

async def safe_send(bot, chat_id, text, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —á–∏—Å—Ç–∏—Ç HTML –∏ –ª–æ–≤–∏—Ç TelegramBadRequest."""
    text = clean_html_tags(text)
    try:
        await bot.send_message(chat_id, text, **kwargs)
    except TelegramBadRequest:
        await bot.send_message(chat_id, text, parse_mode=None)

# ==================== –ö–æ–º–∞–Ω–¥—ã ====================

@dp.message(Command("start"))
async def cmd_start(m: Message):
    help_text = (
        "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/myid ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π Telegram ID\n"
        "/enqueue &lt;—Ç–µ–∫—Å—Ç&gt; ‚Äî –ø–æ–ª–æ–∂–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å\n"
        "/queue ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏\n"
        "/post_oldest ‚Äî –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ –∏ —É–¥–∞–ª–∏—Ç—å –ø–æ—Ö–æ–∂–∏–µ\n"
        "/now ‚Äî —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞\n"
    )
    await m.answer(help_text)

@dp.message(Command("myid"))
async def cmd_myid(m: Message):
    await m.answer(f"–¢–≤–æ–π Telegram ID: <code>{m.from_user.id}</code>")

@dp.message(Command("now"))
async def cmd_now(m: Message):
    now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    await m.answer(f"<b>–°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è:</b> {now_str}")

@dp.message(Command("enqueue"))
async def cmd_enqueue(m: Message, command: CommandObject):
    if not command.args:
        await m.answer("‚ùó –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è: /enqueue <—Ç–µ–∫—Å—Ç>")
        return
    text = command.args.strip()
    db_enqueue(text)
    await m.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å")

@dp.message(Command("queue"))
async def cmd_queue(m: Message):
    count = get_oldest(count_only=True)
    await m.answer(f"üìä –í –æ—á–µ—Ä–µ–¥–∏ {count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")

@dp.message(Command("post_oldest"))
async def cmd_post_oldest(m: Message):
    ad = get_oldest()
    if not ad:
        await m.answer("‚ùó –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞")
        return
    text, ad_id = ad["text"], ad["id"]
    await safe_send(bot, CHANNEL_ID, text)
    delete_by_id(ad_id)
    await m.answer("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")

# ==================== –ó–∞–ø—É—Å–∫ ====================

async def main():
    await init_db()
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –¥–ª—è @layoutplace (TZ=%s)", TZ)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
