import os
import asyncio
import logging
from datetime import datetime, timedelta, time as dtime
from zoneinfo import ZoneInfo

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message, InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton
)

from storage.db import (
    init_db, enqueue, dequeue_oldest, peek_oldest, get_count, set_meta, get_meta
)

# ============== –õ–û–ì–ò ==============
logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(name)s:%(message)s")
log = logging.getLogger("layoutplace_bot")
sched_log = logging.getLogger("layoutplace_scheduler")

# ============== –ù–ê–°–¢–†–û–ô–ö–ò –ò–ó ENV ==============
TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not TOKEN or ":" not in TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞.")

# ID –∫–∞–Ω–∞–ª–∞, –∫—É–¥–∞ –ø–æ—Å—Ç–∏–º. –ú–æ–∂–Ω–æ @username, –Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω—É–∂–µ–Ω —á–∏—Å–ª–æ–≤–æ–π id.
CHANNEL_ID_ENV = os.getenv("CHANNEL_ID", "").strip()
CHANNEL_ID = CHANNEL_ID_ENV if CHANNEL_ID_ENV.startswith("@") else int(CHANNEL_ID_ENV or "-1000000000000")

ADMINS = []
for raw in os.getenv("ADMINS", "").replace(";", ",").split(","):
    raw = raw.strip()
    if raw:
        try:
            ADMINS.append(int(raw))
        except:
            pass

TZ = os.getenv("TZ", "Europe/Moscow")
ZONE = ZoneInfo(TZ)

POST_TIMES_RAW = os.getenv("POST_TIMES", "12:00,16:00,20:00")
POST_TIMES = []
for t in POST_TIMES_RAW.split(","):
    t = t.strip()
    if not t:
        continue
    hh, mm = t.split(":")
    POST_TIMES.append(dtime(hour=int(hh), minute=int(mm)))

PREVIEW_BEFORE_MIN = int(os.getenv("PREVIEW_BEFORE_MIN", "45"))

ALBUM_URL = os.getenv("ALBUM_URL", "https://vk.com/market-222108341?screen=group&section=album_26")
CONTACT  = os.getenv("CONTACT", "@layoutplacebuy")

# ============== –ò–ù–ò–¢ –ë–û–¢–ê ==============
bot = Bot(TOKEN, parse_mode=None)  # –±–µ–∑ parse_mode ‚Äî —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –Ω–∞ ¬´can't parse entities¬ª
dp = Dispatcher()


# ============== –•–ï–õ–ü–ï–†–´ ==============
def _now():
    return datetime.now(ZONE)

def _next_slots():
    """–í–µ—Ä–Ω—ë—Ç —Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–ª–æ—Ç–æ–≤ (—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞) –∫–∞–∫ datetime."""
    now = _now()
    today = now.date()
    slots = []
    for tt in POST_TIMES:
        dt = datetime.combine(today, tt, tzinfo=ZONE)
        if dt >= now:
            slots.append(dt)
    if not slots:
        # –≤—Å–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ—à–ª–∏ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–µ
        tomorrow = today + timedelta(days=1)
        for tt in POST_TIMES:
            slots.append(datetime.combine(tomorrow, tt, tzinfo=ZONE))
    return slots

def _slot_key(dt: datetime) -> str:
    return dt.strftime("%Y-%m-%d %H:%M")

def _preview_key(dt: datetime) -> str:
    return f"preview_sent::{_slot_key(dt)}"

def format_caption(original: str) -> str:
    """
    –ü—Ä–∏–≤–æ–¥–∏–º –∫ –µ–¥–∏–Ω–æ–º—É —Å—Ç–∏–ª—é –±–µ–∑ —ç–º–æ–¥–∑–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–≤–µ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–µ —Å—Ç—Ä–æ–∫–∏.
    –ù–∏—á–µ–≥–æ –Ω–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ HTML, –ø—Ä–æ—Å—Ç–æ —á–∏—Å—Ç–∏–º –ø—Ä–æ–±–µ–ª—ã.
    """
    if not original:
        original = ""
    text = original.replace("\u200b", "").strip()  # —É–±—Ä–∞—Ç—å zero-width
    lines = [ln.rstrip() for ln in text.splitlines()]
    # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Ö–≤–æ—Å—Ç—ã
    while lines and not lines[-1].strip():
        lines.pop()
    base = "\n".join(lines).strip()

    tail = (
        f"\n\n–û–±—â–∏–π –∞–ª—å–±–æ–º: {ALBUM_URL}\n"
        f"–ü–æ–∫—É–ø–∫–∞/–≤–æ–ø—Ä–æ—Å—ã: {CONTACT}"
    )
    # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ ‚Äî –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
    if ALBUM_URL in base:
        tail = tail.replace(f"\n\n–û–±—â–∏–π –∞–ª—å–±–æ–º: {ALBUM_URL}", "")
    if CONTACT in base:
        tail = tail.replace(f"\n–ü–æ–∫—É–ø–∫–∞/–≤–æ–ø—Ä–æ—Å—ã: {CONTACT}", "")

    return (base + tail).strip()


async def _notify_admins(text: str, kb: InlineKeyboardMarkup | None = None):
    for aid in ADMINS:
        try:
            await bot.send_message(aid, text, reply_markup=kb)
        except Exception as e:
            sched_log.warning(f"–ê–¥–º–∏–Ω {aid} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")


async def _send_preview_for_slot(slot_dt: datetime):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–≤—å—é –°–¢–ê–†–ï–ô–®–ï–ì–û –ø–æ—Å—Ç–∞ –∞–¥–º–∏–Ω—É –∑–∞ PREVIEW_BEFORE_MIN –¥–æ —Å–ª–æ—Ç–∞. –ù–µ –ø–æ—Å—Ç–∏—Ç—å!"""
    # –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
    flag_key = _preview_key(slot_dt)
    if get_meta(flag_key, "0") == "1":
        return

    item = peek_oldest()
    if not item:
        await _notify_admins(f"üîî [{_slot_key(slot_dt)}] –í –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤.")
        set_meta(flag_key, "1")
        return

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –ø–æ–¥–ø–∏—Å—å –≤ –µ–¥–∏–Ω–æ–º —Å—Ç–∏–ª–µ
    cap = format_caption(item["caption"])

    # –°–æ–±–µ—Ä—ë–º –ø—Ä–µ–≤—å—é —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞
    header = f"üîî –ü—Ä–µ–≤—å—é [{_slot_key(slot_dt)}]\n–ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∫ –ø–æ—Å—Ç–∏–Ω–≥—É —á–µ—Ä–µ–∑ /post_oldest"
    footer = f"\n\n–í –æ—á–µ—Ä–µ–¥–∏ —Å–µ–π—á–∞—Å: {get_count()}."
    text = f"{header}\n\n{cap}{footer}"

    # –ö–Ω–æ–ø–∫–∞-–ø–æ–¥—Å–∫–∞–∑–∫–∞
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–ø–æ—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä–µ–π—à–∏–π (/post_oldest)", callback_data="noop")]
    ])

    # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–ª–æ–∂–∏—Ç—å –º–µ–¥–∏–∞: –µ—Å–ª–∏ —ç—Ç–æ –Ω–∞–±–æ—Ä ‚Äî —à–ª—ë–º –≥—Ä—É–ø–ø—É, –∏–Ω–∞—á–µ —Ñ–æ—Ç–æ + —Ç–µ–∫—Å—Ç
    items = item["items"]
    try:
        if items and len(items) > 1:
            media = []
            for i, it in enumerate(items):
                if it["type"] == "photo":
                    if i == 0:
                        media.append(InputMediaPhoto(media=it["file_id"], caption=text))
                    else:
                        media.append(InputMediaPhoto(media=it["file_id"]))
            # –æ—Ç–ø—Ä–∞–≤–∏–º –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω—É
            for aid in ADMINS:
                try:
                    msgs = await bot.send_media_group(aid, media)
                    # –¥–æ–≥–æ–Ω–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    await bot.send_message(aid, "–ù–∞–∂–º–∏ /post_oldest –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å—Ç–∏–Ω–≥–∞.", reply_markup=kb)
                except Exception as e:
                    sched_log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–≤—å—é –∞–ª—å–±–æ–º –∞–¥–º–∏–Ω—É {aid}: {e}")
        else:
            # –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –±–µ–∑ —Ñ–æ—Ç–æ
            if items and items[0]["type"] == "photo":
                for aid in ADMINS:
                    try:
                        await bot.send_photo(aid, photo=items[0]["file_id"], caption=text, reply_markup=kb)
                    except Exception as e:
                        sched_log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–≤—å—é —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É {aid}: {e}")
            else:
                await _notify_admins(text, kb=kb)
    finally:
        # –æ—Ç–º–µ—Ç–∏–º, —á—Ç–æ –ø—Ä–µ–≤—å—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ—Ç–∞
        set_meta(flag_key, "1")


async def scheduler_loop():
    """
    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¢–û–õ–¨–ö–û –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –ø—Ä–µ–≤—å—é –∑–∞ PREVIEW_BEFORE_MIN –¥–æ —Å–ª–æ—Ç–∞.
    –ù–∏—á–µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –ø–æ—Å—Ç–∏—Ç ‚Äî –ø–æ—Å—Ç–∏–Ω–≥ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ /post_oldest.
    """
    sched_log.info(f"Scheduler TZ={TZ}, times={','.join([t.strftime('%H:%M') for t in POST_TIMES])}, preview_before={PREVIEW_BEFORE_MIN} min")

    while True:
        try:
            slots = _next_slots()
            if slots:
                slot = slots[0]
                preview_at = slot - timedelta(minutes=PREVIEW_BEFORE_MIN)
                now = _now()

                # –µ—Å–ª–∏ –º—ã –ø–µ—Ä–µ—Å–µ–∫–ª–∏ –º–æ–º–µ–Ω—Ç –ø—Ä–µ–≤—å—é (–∏–ª–∏ —Ä–æ–≤–Ω–æ –ø–æ–ø–∞–ª–∏) ‚Äî —à–ª—ë–º –ø—Ä–µ–≤—å—é
                if now >= preview_at and now < slot + timedelta(minutes=1):
                    await _send_preview_for_slot(slot)
        except Exception as e:
            sched_log.error(f"scheduler error: {e}")
        await asyncio.sleep(20)  # –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Å—Ç–æ, –Ω–æ –±–µ–∑ —Ñ–∞–Ω–∞—Ç–∏–∑–º–∞


# ============== –û–ë–†–ê–ë–û–¢–ö–ê –í–•–û–î–Ø–©–ò–• ==============

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –∞–ª—å–±–æ–º–æ–≤ –ø–æ media_group_id (–∂–∏–≤—ë—Ç –≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞)
_MEDIA_CACHE: dict[str, dict] = {}
_MEDIA_TTL_SEC = 10

def _cleanup_media_cache():
    now = datetime.now().timestamp()
    to_del = []
    for k, v in _MEDIA_CACHE.items():
        if now - v["ts"] > _MEDIA_TTL_SEC:
            to_del.append(k)
    for k in to_del:
        _MEDIA_CACHE.pop(k, None)

def _src_tuple(m: Message):
    """
    –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞ ‚Äî –≤–µ—Ä–Ω—ë–º (chat_id, message_id) –æ—Ä–∏–≥–∏–Ω–∞–ª–∞,
    —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —É–¥–∞–ª–∏—Ç—å.
    """
    try:
        if m.forward_from_chat and (str(getattr(m.forward_from_chat, "type", "")) == "channel"):
            src_chat_id = m.forward_from_chat.id
            src_msg_id = getattr(m, "forward_from_message_id", None)
            if src_chat_id and src_msg_id:
                return (int(src_chat_id), int(src_msg_id))
    except:
        pass
    return None

@dp.message(Command("start"))
async def cmd_start(m: Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /add_post ‚Äî –ø–µ—Ä–µ—à–ª–∏ –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ (—Ñ–æ—Ç–æ/–∞–ª—å–±–æ–º + –æ–ø–∏—Å–∞–Ω–∏–µ), —è –¥–æ–±–∞–≤–ª—é –≤ –æ—á–µ—Ä–µ–¥—å.\n"
        "‚Ä¢ /queue ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏.\n"
        "‚Ä¢ /post_oldest ‚Äî –∑–∞–ø–æ—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä–µ–π—à–∏–π –ø–æ—Å—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –≤ –∫–∞–Ω–∞–ª.\n\n"
        f"–í—Ä–µ–º—è —Å–ª–æ—Ç–æ–≤: {', '.join([t.strftime('%H:%M') for t in POST_TIMES])} ({TZ}).\n"
        f"–ü—Ä–µ–≤—å—é –∑–∞ {PREVIEW_BEFORE_MIN} –º–∏–Ω—É—Ç ‚Äî –≤ –õ–° –∞–¥–º–∏–Ω–∞–º."
    )
    await m.answer(text)

@dp.message(Command("queue"))
async def cmd_queue(m: Message):
    await m.answer(f"–í –æ—á–µ—Ä–µ–¥–∏: {get_count()}.")

@dp.message(Command("post_oldest"))
async def cmd_post_oldest(m: Message):
    # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã
    if m.from_user and m.from_user.id not in ADMINS:
        return
    task = dequeue_oldest()
    if not task:
        await m.answer("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞—è.")
        return

    caption = format_caption(task["caption"])
    items = task["items"]

    try:
        if items and len(items) > 1:
            media = []
            for i, it in enumerate(items):
                if it["type"] == "photo":
                    if i == 0:
                        media.append(InputMediaPhoto(media=it["file_id"], caption=caption))
                    else:
                        media.append(InputMediaPhoto(media=it["file_id"]))
            msgs = await bot.send_media_group(CHANNEL_ID, media)
            posted_msg_id = msgs[0].message_id if msgs else None
        else:
            if items and items[0]["type"] == "photo":
                msg = await bot.send_photo(CHANNEL_ID, photo=items[0]["file_id"], caption=caption)
                posted_msg_id = msg.message_id
            else:
                # –Ω–∞ –≤—Å—è–∫–∏–π ‚Äî —Ç–µ–∫—Å—Ç–æ–º
                msg = await bot.send_message(CHANNEL_ID, caption)
                posted_msg_id = msg.message_id

        # –ø–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ
        if task["src"]:
            try:
                await bot.delete_message(task["src"][0], task["src"][1])
            except Exception as e:
                logging.warning(f"–ù–µ —Å–º–æ–≥ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {task['src'][0]}/{task['src'][1]}: {e}")

        await m.answer(f"–ì–æ—Ç–æ–≤–æ. –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
    except Exception as e:
        await m.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ—Å—Ç–∏—Ç—å: {e}")

@dp.message(Command("add_post"))
async def cmd_add_post_hint(m: Message):
    await m.answer("–ü–µ—Ä–µ—à–ª–∏ –±–æ—Ç—É –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ (—Ñ–æ—Ç–æ/–∞–ª—å–±–æ–º —Å –ø–æ–¥–ø–∏—Å—å—é). –Ø –¥–æ–±–∞–≤–ª—é –≤ –æ—á–µ—Ä–µ–¥—å.")

@dp.message(F.media_group_id | F.photo | F.caption | F.forward_from_chat)
async def any_message(m: Message):
    """
    –õ–æ–≤–∏–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –ø–æ—Å—Ç—ã.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Ñ–æ—Ç–æ –∏ –∞–ª—å–±–æ–º—ã (–ø–æ media_group_id).
    """
    # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å
    if not m.from_user or m.from_user.id not in ADMINS:
        return

    _cleanup_media_cache()

    # –ï—Å–ª–∏ –∞–ª—å–±–æ–º
    if m.media_group_id:
        key = str(m.media_group_id)
        bucket = _MEDIA_CACHE.get(key)
        if not bucket:
            bucket = {"ts": datetime.now().timestamp(), "items": [], "caption": "", "src": _src_tuple(m)}
            _MEDIA_CACHE[key] = bucket

        # –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        if m.photo:
            photo = m.photo[-1]  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
            bucket["items"].append({"type": "photo", "file_id": photo.file_id})
        # –ø–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤–æ–∑—å–º—ë–º, –ª—é–±—É—é –Ω–µ–ø—É—Å—Ç—É—é
        if (m.caption or "").strip():
            bucket["caption"] = m.caption.strip()

        # –ø–æ–¥–æ–∂–¥—ë–º, –ø–æ–∫–∞ –≤–µ—Å—å –∞–ª—å–±–æ–º –ø—Ä–∏–¥—ë—Ç; –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –∂–º—ë—Ç ‚Äî
        # –º—ã –¥–æ–±–∞–≤–∏–º –∞–ª—å–±–æ–º –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ –∫–æ–º–∞–Ω–¥–µ –æ—Ç Telegram –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞.
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–∫–∞ –ø—Ä–∏—à–ª–∞ ‚Äî —Å—Ç–∞–≤–∏–º –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É –∏ –æ—Ñ–æ—Ä–º–ª—è–µ–º.
        await asyncio.sleep(1.0)
        # –µ—Å–ª–∏ –Ω–æ–≤—ã—Ö —á–∞—Å—Ç–µ–π –Ω–µ –ø—Ä–∏–±—ã–ª–æ –∑–∞ TTL ‚Äî —Å—á–∏—Ç–∞–µ–º –∞–ª—å–±–æ–º –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–º –∏ –∫–ª–∞–¥—ë–º –≤ –æ—á–µ—Ä–µ–¥—å
        # (–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ ‚Äî –∞–ª—å–±–æ–º –¥–æ–±–∞–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞)
        qid = enqueue(bucket["items"], bucket["caption"], bucket["src"])
        _MEDIA_CACHE.pop(key, None)
        await m.answer(f"–î–æ–±–∞–≤–∏–ª –≤ –æ—á–µ—Ä–µ–¥—å –∞–ª—å–±–æ–º. –°–µ–π—á–∞—Å –≤ –æ—á–µ—Ä–µ–¥–∏: {get_count()}.")
        return

    # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ/—Ç–µ–∫—Å—Ç
    items = []
    if m.photo:
        items.append({"type": "photo", "file_id": m.photo[-1].file_id})

    caption = (m.caption or m.text or "").strip()
    src = _src_tuple(m)
    if not items and not caption:
        return  # –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç

    qid = enqueue(items, caption, src)
    await m.answer(f"–î–æ–±–∞–≤–∏–ª –≤ –æ—á–µ—Ä–µ–¥—å. –°–µ–π—á–∞—Å –≤ –æ—á–µ—Ä–µ–¥–∏: {get_count()}.")


# ============== –°–¢–ê–†–¢ ==============
async def run_bot():
    init_db()
    log.info(f"Starting bot instance...")
    # –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–æ—Ä—É—Ç–∏–Ω–∞-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    asyncio.create_task(scheduler_loop())
    await dp.start_polling(bot)
