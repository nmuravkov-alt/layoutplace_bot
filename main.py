import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message

from config import TOKEN, ADMINS
from storage.db import init_db, add_post, get_all, get_oldest, delete_post

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# ================= –ö–æ–º–∞–Ω–¥–∞ /start =================
@dp.message(Command("start"))
async def cmd_start(m: Message):
    help_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é –ø–æ—Å—Ç–æ–≤.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n"
        "/queue ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤\n"
        "/test_preview ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É\n\n"
        "–ü–æ—Å—Ç–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é."
    )
    await m.answer(help_text)

# ================= –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è =================
@dp.message(Command("add"))
async def cmd_add(m: Message):
    if not m.reply_to_message or not m.reply_to_message.caption:
        await m.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ –ø–æ–¥–ø–∏—Å—å—é.")
        return

    try:
        photo = m.reply_to_message.photo[-1].file_id
        caption = m.reply_to_message.caption
        await add_post(photo, caption)
        await m.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å!")
    except Exception as e:
        log.exception(e)
        await m.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")

# ================= –û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤ =================
@dp.message(Command("queue"))
async def cmd_queue(m: Message):
    posts = get_all()
    if not posts:
        await m.answer("üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
        return

    text = "<b>üìã –û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤:</b>\n\n"
    for i, post in enumerate(posts, start=1):
        text += f"{i}. {post['caption'][:60]}...\n"

    await m.answer(text)

# ================= –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É =================
@dp.message(Command("test_preview"))
async def cmd_test_preview(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É"""
    sent = 0
    for admin_id in ADMINS:
        try:
            await bot.send_message(
                admin_id,
                f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Ä–∞–±–æ—Ç–∞–µ—Ç!\nüïí {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
            )
            sent += 1
        except Exception as e:
            log.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    if sent > 0:
        await message.answer("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º.")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∏ –æ–¥–Ω–æ–º—É –∞–¥–º–∏–Ω—É.")

# ================= –ó–∞–ø—É—Å–∫ =================
async def main():
    await init_db()
    log.info(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –¥–ª—è @{(await bot.me()).username} (TZ=Europe/Moscow)")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
