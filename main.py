# main.py
import os
import re
import json
import pytz
import time
import asyncio
import logging
import sqlite3
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional, Tuple

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandObject
from aiogram.types import (
    Message, InputMediaPhoto, InputMediaVideo
)

# -------------------- ENV --------------------

TOKEN = os.getenv("TOKEN", "").strip()
if not TOKEN or ":" not in TOKEN:
    raise RuntimeError("ENV TOKEN –ø—É—Å—Ç –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ó–∞–¥–∞–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞.")

CHANNEL_ID = int(os.getenv("CHANNEL_ID", "0"))
if CHANNEL_ID == 0:
    raise RuntimeError("ENV CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–∏–º–µ—Ä: -1001758490510")

ADMINS = [int(x) for x in os.getenv("ADMINS", "").replace(" ", "").split(",") if x]
TZ = os.getenv("TZ", "Europe/Moscow")
POST_TIMES = [t.strip() for t in os.getenv("POST_TIMES", "12:00,16:00,20:00").split(",") if t.strip()]
PREVIEW_BEFORE_MIN = int(os.getenv("PREVIEW_BEFORE_MIN", "45"))
ALBUM_URL = os.getenv("ALBUM_URL", "").strip()
CONTACT = os.getenv("CONTACT", "@layoutplacebuy").strip()
DB_PATH = os.getenv("DB_PATH", "/data/data.db")

# -------------------- BOT --------------------

bot = Bot(TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

logger = logging.getLogger("layoutplace_bot")

# -------------------- DB (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π) --------------------

def _cx() -> sqlite3.Connection:
    os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)
    cx = sqlite3.connect(DB_PATH)
    cx.row_factory = sqlite3.Row
    return cx

def db_init() -> None:
    cx = _cx()
    with cx:
        cx.execute("""
        CREATE TABLE IF NOT EXISTS queue(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            payload TEXT NOT NULL,    -- JSON [{'type':'photo','file_id':'...'}, ...] –∏–ª–∏ [{'type':'text','text':'...'}]
            caption TEXT,
            created_at INTEGER NOT NULL
        )
        """)
        cx.execute("""
        CREATE TABLE IF NOT EXISTS meta(
            k TEXT PRIMARY KEY,
            v TEXT
        )
        """)
    cx.close()

def q_enqueue(payload: List[Dict[str, Any]], caption: Optional[str]) -> int:
    cx = _cx()
    with cx:
        cur = cx.execute(
            "INSERT INTO queue(payload, caption, created_at) VALUES(?,?,?)",
            (json.dumps(payload, ensure_ascii=False), caption or "", int(time.time()))
        )
        qid = cur.lastrowid
    cx.close()
    return qid

def q_dequeue_oldest() -> Optional[Dict[str, Any]]:
    cx = _cx()
    with cx:
        row = cx.execute("SELECT * FROM queue ORDER BY id LIMIT 1").fetchone()
        if not row:
            cx.close()
            return None
        cx.execute("DELETE FROM queue WHERE id=?", (row["id"],))
    cx.close()
    return dict(row)

def q_delete(qid: int) -> bool:
    cx = _cx()
    with cx:
        cur = cx.execute("DELETE FROM queue WHERE id=?", (qid,))
        ok = cur.rowcount > 0
    cx.close()
    return ok

def q_list() -> List[Dict[str, Any]]:
    cx = _cx()
    rows = cx.execute("SELECT * FROM queue ORDER BY id").fetchall()
    cx.close()
    return [dict(r) for r in rows]

def meta_get(k: str) -> Optional[str]:
    cx = _cx()
    row = cx.execute("SELECT v FROM meta WHERE k=?", (k,)).fetchone()
    cx.close()
    return row["v"] if row else None

def meta_set(k: str, v: str) -> None:
    cx = _cx()
    with cx:
        cx.execute("INSERT INTO meta(k,v) VALUES(?,?) ON CONFLICT(k) DO UPDATE SET v=excluded.v", (k, v))
    cx.close()

# -------------------- –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ --------------------

def _cleanup_text(t: str) -> str:
    t = t.replace("\r", "").strip()
    # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    t = re.sub(r"[ \t]+", " ", t)
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Å—Ç—Ä–æ–∫
    lines = [ln.strip() for ln in t.split("\n")]
    # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ –∫—Ä–∞—è–º
    while lines and not lines[0]:
        lines.pop(0)
    while lines and not lines[-1]:
        lines.pop()
    return "\n".join(lines)

def normalize_caption(raw: str) -> str:
    """
    –ü—Ä–∏–≤–æ–¥–∏–º –ø–æ—Å—Ç –∫ –µ–¥–∏–Ω–æ–º—É –≤–∏–¥—É.
    –°–Ω–∏–∑—É –≤—Å–µ–≥–¥–∞: –æ–±—â–∏–π –∞–ª—å–±–æ–º + –∫–æ–Ω—Ç–∞–∫—Ç.
    """
    raw = _cleanup_text(raw)
    # –ü—Ä–æ—Å—Ç–µ–π—à–∏–µ –ø—Ä–∞–≤–∫–∏: "–¶–µ–Ω–∞ - " -> "–¶–µ–Ω–∞ ‚Äî "
    raw = re.sub(r"–¶–µ–Ω–∞\s*[:-]\s*", "–¶–µ–Ω–∞ ‚Äî ", raw, flags=re.IGNORECASE)
    raw = re.sub(r"–°–æ—Å—Ç–æ—è–Ω–∏–µ\s*[:-]\s*", "–°–æ—Å—Ç–æ—è–Ω–∏–µ : ", raw, flags=re.IGNORECASE)
    raw = re.sub(r"–†–∞–∑–º–µ—Ä\s*[:-]\s*", "–†–∞–∑–º–µ—Ä: ", raw, flags=re.IGNORECASE)

    tail = []
    if ALBUM_URL:
        tail.append(f"–û–±—â–∏–π –∞–ª—å–±–æ–º: {ALBUM_URL}")
    tail.append(f"–ü–æ–∫—É–ø–∫–∞/–≤–æ–ø—Ä–æ—Å—ã: {CONTACT}")

    # –£–±–∏—Ä–∞–µ–º –∏–∑ –∏—Å—Ö–æ–¥–Ω–∏–∫–∞ –¥—É–±–ª–∏ —Ö–≤–æ—Å—Ç–∞, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –±—ã–ª–∏
    t = re.sub(r"–û–±—â–∏–π –∞–ª—å–±–æ–º:.*\n?", "", raw, flags=re.IGNORECASE)
    t = re.sub(r"–ü–æ–∫—É–ø–∫–∞/–≤–æ–ø—Ä–æ—Å—ã:.*\n?", "", t, flags=re.IGNORECASE)

    caption = f"{t}\n\n" + "\n".join(tail)
    return caption.strip()

# -------------------- –ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞: —Å–±–æ—Ä—â–∏–∫ --------------------

# –±—É—Ñ–µ—Ä –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø: {media_group_id: {'items':[Message,...], 'task': asyncio.Task}}
_media_buf: Dict[str, Dict[str, Any]] = {}

async def _flush_media_group(group_id: str):
    """–°–∫–ª–µ–∏–≤–∞–µ–º items –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –≤ –æ–¥–∏–Ω payload –∏ —Å—Ç–∞–≤–∏–º –≤ –æ—á–µ—Ä–µ–¥—å."""
    pkg = _media_buf.pop(group_id, None)
    if not pkg:
        return
    items: List[Message] = pkg["items"]

    # —Å–æ–±–∏—Ä–∞–µ–º –º–µ–¥–∏–∞
    media_items: List[Dict[str, Any]] = []
    caption_parts: List[str] = []
    for m in items:
        if m.photo:
            # –±–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º –∫–∞—á–µ—Å—Ç–≤–∞
            file_id = m.photo[-1].file_id
            media_items.append({"type": "photo", "file_id": file_id})
        elif m.video:
            media_items.append({"type": "video", "file_id": m.video.file_id})
        # –ª–æ–≤–∏–º –ø–æ–¥–ø–∏—Å—å, –µ—Å–ª–∏ –ø–æ–ø–∞–ª–∞—Å—å
        if m.caption and not caption_parts:
            caption_parts.append(m.caption)

    caption = normalize_caption(caption_parts[0]) if caption_parts else ""
    qid = q_enqueue(media_items, caption)
    for admin_id in ADMINS:
        try:
            await bot.send_message(admin_id, f"‚úÖ –ê–ª—å–±–æ–º –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –∫–∞–∫ #{qid}")
        except Exception:
            pass

def _schedule_flush(group_id: str, delay: float = 1.2):
    """–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π —Ñ–ª–∞—à, —á—Ç–æ–±—ã –¥–æ–∂–¥–∞—Ç—å—Å—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–ª—å–±–æ–º–∞."""
    async def _task():
        try:
            await asyncio.sleep(delay)
            await _flush_media_group(group_id)
        except Exception as e:
            logger.exception("flush media group error: %s", e)
    return asyncio.create_task(_task())

# -------------------- –ü–æ—Å—Ç–∏–Ω–≥ --------------------

_last_channel_msg_id_key = "last_channel_msg_id"

async def _post_payload_to_channel(payload: List[Dict[str, Any]], caption: str) -> int:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –∏–ª–∏ –æ–¥–∏–Ω–æ—á–Ω—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç message_id –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞ (–∏–ª–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ).
    """
    # –ø–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥—É–±–ª–∏–∫–∞—Ç (best-effort)
    try:
        last_id = meta_get(_last_channel_msg_id_key)
        if last_id:
            await bot.delete_message(chat_id=CHANNEL_ID, message_id=int(last_id))
    except Exception:
        pass

    if len(payload) == 0:
        # —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
        msg = await bot.send_message(CHANNEL_ID, caption or " ")
        meta_set(_last_channel_msg_id_key, str(msg.message_id))
        return msg.message_id

    if len(payload) == 1 and payload[0]["type"] == "photo":
        msg = await bot.send_photo(CHANNEL_ID, photo=payload[0]["file_id"], caption=caption or None)
        meta_set(_last_channel_msg_id_key, str(msg.message_id))
        return msg.message_id

    # –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞
    media: List[Any] = []
    for i, it in enumerate(payload):
        if it["type"] == "photo":
            media.append(InputMediaPhoto(media=it["file_id"], caption=caption if i == 0 else None))
        elif it["type"] == "video":
            media.append(InputMediaVideo(media=it["file_id"], caption=caption if i == 0 else None))
    msgs = await bot.send_media_group(CHANNEL_ID, media=media)
    first_id = msgs[0].message_id
    meta_set(_last_channel_msg_id_key, str(first_id))
    return first_id

async def _send_preview(qrow: Dict[str, Any], when: str):
    """–ü—Ä–µ–≤—å—é –∞–¥–º–∏–Ω–∞–º: —Ç–µ–∫—Å—Ç + id –æ—á–µ—Ä–µ–¥–∏."""
    qid = qrow["id"]
    caption = (qrow["caption"] or "").strip()
    payload = json.loads(qrow["payload"])

    txt = f"üü° –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä #{qid}\n–í—Ä–µ–º—è –ø–æ—Å—Ç–∏–Ω–≥–∞: {when}\n\n{caption or '(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)'}"
    for admin_id in ADMINS:
        try:
            if payload and payload[0]["type"] == "photo":
                # –∫–∞—Ä—Ç–∏–Ω–∫–∞ + –ø–æ–¥–ø–∏—Å—å –≤ –õ–° –∞–¥–º–∏–Ω–∞
                await bot.send_photo(admin_id, photo=payload[0]["file_id"], caption=txt[:1024] if txt else None)
            else:
                await bot.send_message(admin_id, txt[:4096])
        except Exception:
            pass

# -------------------- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ --------------------

def _now_tz() -> datetime:
    return datetime.now(pytz.timezone(TZ))

def _today_str() -> str:
    return _now_tz().strftime("%Y-%m-%d")

def _slot_key(slot: str) -> str:
    return f"slot:{_today_str()}:{slot}"

def _preview_key(slot: str) -> str:
    return f"preview:{_today_str()}:{slot}"

async def scheduler_loop():
    logger.info("Scheduler –∑–∞–ø—É—â–µ–Ω.")
    while True:
        try:
            now = _now_tz()
            for slot in POST_TIMES:
                # –ø—Ä–µ–≤—å—é
                try:
                    hh, mm = [int(x) for x in slot.split(":")]
                    slot_dt = now.replace(hour=hh, minute=mm, second=0, microsecond=0)
                    prev_dt = slot_dt - timedelta(minutes=PREVIEW_BEFORE_MIN)
                except Exception:
                    continue

                # –ø—Ä–µ–≤—å—é: –µ–¥–∏–Ω–æ–∂–¥—ã
                if prev_dt <= now < slot_dt and meta_get(_preview_key(slot)) != "done":
                    rows = q_list()
                    if rows:
                        await _send_preview(rows[0], when=slot)
                        meta_set(_preview_key(slot), "done")

                # –ø–æ—Å—Ç–∏–Ω–≥ —Å–ª–æ—Ç–∞: –µ–¥–∏–Ω–æ–∂–¥—ã
                if abs((slot_dt - now).total_seconds()) <= 25 and meta_get(_slot_key(slot)) != "done":
                    row = q_dequeue_oldest()
                    if row:
                        payload = json.loads(row["payload"])
                        caption = (row["caption"] or "").strip()
                        await _post_payload_to_channel(payload, caption)
                        for admin_id in ADMINS:
                            try:
                                await bot.send_message(admin_id, f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ #{row['id']} ({slot})")
                            except Exception:
                                pass
                    meta_set(_slot_key(slot), "done")

            # –≤ –ø–æ–ª–Ω–æ—á—å —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–ª—é—á–∏ –ø—Ä–µ–≤—å—é/—Å–ª–æ—Ç–æ–≤
            if now.hour == 0 and now.minute < 2:
                # –ø—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ —Å–º–µ–Ω–µ –¥–∞—Ç—ã
                pass
        except Exception as e:
            logger.exception("scheduler error: %s", e)

        await asyncio.sleep(5)

# -------------------- –ö–æ–º–∞–Ω–¥—ã --------------------

@dp.message(Command("start"))
async def cmd_start(m: Message):
    text = (
        "<b>Layoutplace Bot</b>\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ <code>/add_post</code> ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏ —Å—é–¥–∞ –ø–æ—Å—Ç/–∞–ª—å–±–æ–º.\n"
        "‚Ä¢ <code>/queue</code> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å.\n"
        "‚Ä¢ <code>/post_oldest</code> ‚Äî –∑–∞–ø–æ—Å—Ç–∏—Ç—å —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤—Ä—É—á–Ω—É—é.\n"
        "‚Ä¢ <code>/delete &lt;id&gt;</code> ‚Äî —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏.\n\n"
        f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: <code>{', '.join(POST_TIMES)}</code>, –ø—Ä–µ–≤—å—é –∑–∞ <code>{PREVIEW_BEFORE_MIN} –º–∏–Ω</code>.\n"
        "–ê–ª—å–±–æ–º –∏ –∫–æ–Ω—Ç–∞–∫—Ç –≤–Ω–∏–∑—É –ø–æ–¥–ø–∏—Å–∏ ‚Äî —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã."
    )
    await m.answer(text)

@dp.message(Command("help"))
async def cmd_help(m: Message):
    await cmd_start(m)

@dp.message(Command("queue"))
async def cmd_queue(m: Message):
    rows = q_list()
    if not rows:
        await m.answer("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
        return
    lines = [f"–í—Å–µ–≥–æ: {len(rows)}"]
    for r in rows:
        created = datetime.fromtimestamp(r["created_at"]).strftime("%d.%m %H:%M")
        payload = json.loads(r["payload"])
        kind = "album" if len(payload) > 1 else ("photo" if payload and payload[0]["type"] != "text" else "text")
        lines.append(f"#{r['id']} [{kind}] {created}")
    await m.answer("\n".join(lines))

@dp.message(Command("delete"))
async def cmd_delete(m: Message, command: CommandObject):
    if m.from_user and ADMINS and m.from_user.id not in ADMINS:
        return
    if not command.args or not command.args.strip().isdigit():
        await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/delete &lt;id&gt;</code>")
        return
    qid = int(command.args.strip())
    ok = q_delete(qid)
    await m.answer("üóë –£–¥–∞–ª–µ–Ω–æ" if ok else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")

@dp.message(Command("post_oldest"))
async def cmd_post_oldest(m: Message):
    if m.from_user and ADMINS and m.from_user.id not in ADMINS:
        return
    row = q_dequeue_oldest()
    if not row:
        await m.answer("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
        return
    payload = json.loads(row["payload"])
    caption = (row["caption"] or "").strip()
    await _post_payload_to_channel(payload, caption)
    await m.answer(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω #{row['id']} –≤—Ä—É—á–Ω—É—é.")

# -------------------- –ü—Ä–∏—ë–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞ --------------------

@dp.message(F.media_group_id)
async def on_media_group(m: Message):
    gid = str(m.media_group_id)
    pkg = _media_buf.get(gid)
    if not pkg:
        pkg = _media_buf[gid] = {"items": [], "task": None}
    pkg["items"].append(m)
    # –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π —Ñ–ª–∞—à
    if pkg["task"]:
        pkg["task"].cancel()
    pkg["task"] = _schedule_flush(gid, delay=1.3)

@dp.message(F.photo | F.video)
async def on_single_media(m: Message):
    # –æ–¥–∏–Ω–æ—á–Ω–∞—è —Ñ–æ—Ç–∫–∞/–≤–∏–¥–µ–æ
    if m.media_group_id:
        return  # –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –ª–æ–≤–∏–º –≤ –¥—Ä—É–≥–æ–º —Ö—ç–Ω–¥–ª–µ—Ä–µ
    payload: List[Dict[str, Any]] = []
    if m.photo:
        payload.append({"type": "photo", "file_id": m.photo[-1].file_id})
    elif m.video:
        payload.append({"type": "video", "file_id": m.video.file_id})

    caption = normalize_caption(m.caption or "")
    qid = q_enqueue(payload, caption)
    await m.answer(f"‚úÖ –ü–æ—Å—Ç #{qid} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –∏ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")

@dp.message(F.text)
async def on_text(m: Message):
    # —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
    t = m.text or m.caption or ""
    caption = normalize_caption(t)
    payload = [{"type": "text", "text": caption}]
    qid = q_enqueue(payload, caption)
    await m.answer(f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç #{qid} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.")

# -------------------- –ó–∞–ø—É—Å–∫ --------------------

async def run_bot():
    logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s:%(name)s:%(message)s")
    db_init()
    logger.info("üöÄ –°—Ç–∞—Ä—Ç—É–µ–º Layoutplace Bot...")
    logger.info("Scheduler TZ=%s, times=%s, preview_before=%s –º–∏–Ω", TZ, POST_TIMES, PREVIEW_BEFORE_MIN)

    # üëâ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è 409, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –∞–∫—Ç–∏–≤–µ–Ω webhook
    await bot.delete_webhook(drop_pending_updates=False)

    asyncio.create_task(scheduler_loop())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(run_bot())
