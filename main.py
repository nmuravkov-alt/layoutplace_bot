# main.py
import asyncio
import logging
import os
from datetime import datetime
from zoneinfo import ZoneInfo
from html import escape as html_escape

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandObject
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from aiogram.exceptions import TelegramBadRequest

from storage.db import (
    init_db,
    enqueue as db_enqueue,
    get_oldest,
    list_queue as db_list_queue,
    delete_by_id,
    find_similar_ids,
    bulk_delete,
    is_duplicate,
)

# ---------------- –ö–æ–Ω—Ñ–∏–≥ ----------------
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
CHANNEL_ID = os.getenv("CHANNEL_ID", "").strip()  # @username –∏–ª–∏ -100...
ADMINS_RAW = os.getenv("ADMINS", "").strip()
TZ = os.getenv("TZ", "Europe/Moscow")
POST_REPORT_TO_CHANNEL = os.getenv("POST_REPORT_TO_CHANNEL", "0").strip() == "1"

tz = ZoneInfo(TZ)
ADMINS: set[int] = set(int(x.strip()) for x in ADMINS_RAW.replace(";", ",").split(",") if x.strip().lstrip("-").isdigit())

logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(name)s | %(message)s")
log = logging.getLogger("layoutplace_bot")

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# ---------------- –£—Ç–∏–ª–∏—Ç—ã ----------------
def _is_admin(m: Message) -> bool:
    return bool(m.from_user and m.from_user.id in ADMINS)

def _now_str() -> str:
    return datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S")

async def safe_send_channel(text: str):
    """–°–Ω–∞—á–∞–ª–∞ HTML; –ø—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π plain."""
    try:
        await bot.send_message(CHANNEL_ID, text, disable_web_page_preview=False)
    except TelegramBadRequest:
        await bot.send_message(CHANNEL_ID, html_escape(text), parse_mode=None, disable_web_page_preview=False)

async def _notify_admins(text: str):
    for uid in ADMINS:
        try:
            await bot.send_message(uid, text, disable_web_page_preview=True)
        except Exception:
            pass

# ---------------- –ö–æ–º–∞–Ω–¥—ã ----------------
@dp.message(Command("start"))
async def cmd_start(m: Message):
    help_text = (
        "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã):</b>\n"
        "/enqueue &lt;—Ç–µ–∫—Å—Ç&gt; ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å (—Å –∞–≤—Ç–æ-–æ—á–∏—Å—Ç–∫–æ–π –∏ –∞–Ω—Ç–∏-–¥—É–±–ª–µ–º)\n"
        "/queue ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏\n"
        "/queue_list [N] ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å N –±–ª–∏–∂–∞–π—à–∏—Ö –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)\n"
        "/delete &lt;id&gt; ‚Äî —É–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ ID\n"
        "/post_oldest ‚Äî –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ –∏ —É–¥–∞–ª–∏—Ç—å –ø–æ—Ö–æ–∂–∏–µ\n"
        "/now ‚Äî —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞\n"
    )
    await m.answer(help_text)

@dp.message(Command("myid"))
async def cmd_myid(m: Message):
    await m.answer(f"–¢–≤–æ–π Telegram ID: <code>{m.from_user.id}</code>")

@dp.message(Command("now"))
async def cmd_now(m: Message):
    await m.answer(f"<b>–°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è:</b> {_now_str()} ({TZ})")

@dp.message(Command("enqueue"))
async def cmd_enqueue(m: Message, command: CommandObject):
    if not _is_admin(m):
        return await m.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
    raw = (command.args or "").strip()
    if not raw:
        return await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /enqueue &lt;—Ç–µ–∫—Å—Ç&gt;")

    # –∞–≤—Ç–æ-–æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–±–µ–ª–æ–≤
    text = " ".join(raw.split())

    # –∞–Ω—Ç–∏-–¥—É–±–ª—å –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ
    dup_id = is_duplicate(text)
    if dup_id:
        return await m.answer(f"‚ö†Ô∏è –¢–∞–∫–æ–π —Ç–µ–∫—Å—Ç —É–∂–µ –µ—Å—Ç—å –≤ –æ—á–µ—Ä–µ–¥–∏ (ID: <code>{dup_id}</code>).")

    ad_id = db_enqueue(text)
    await m.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å. ID: <code>{ad_id}</code>")

@dp.message(Command("queue"))
async def cmd_queue(m: Message):
    if not _is_admin(m):
        return await m.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
    count = get_oldest(count_only=True)
    await m.answer(f"üì¶ –í –æ—á–µ—Ä–µ–¥–∏: <b>{count}</b>")

@dp.message(Command("queue_list"))
async def cmd_queue_list(m: Message, command: CommandObject):
    if not _is_admin(m):
        return await m.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
    # –ø–∞—Ä—Å–∏–º N
    try:
        n = int((command.args or "").strip() or "10")
        n = max(1, min(50, n))
    except ValueError:
        n = 10
    items = db_list_queue(n)
    if not items:
        return await m.answer("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
    # –æ—Ç—Ä–∏—Å—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω–æ
    lines = []
    for ad_id, text, created_at in items:
        when = datetime.fromtimestamp(created_at, tz).strftime("%d.%m %H:%M")
        preview = (text[:80] + "‚Ä¶") if len(text) > 80 else text
        lines.append(f"<code>{ad_id}</code> ‚Ä¢ {when} ‚Ä¢ {html_escape(preview)}")
    await m.answer("–ü–µ—Ä–≤—ã–µ –≤ –æ—á–µ—Ä–µ–¥–∏:\n" + "\n".join(lines))

@dp.message(Command("delete"))
async def cmd_delete(m: Message, command: CommandObject):
    if not _is_admin(m):
        return await m.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
    arg = (command.args or "").strip()
    if not arg or not arg.isdigit():
        return await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete &lt;id&gt;")
    ad_id = int(arg)
    removed = delete_by_id(ad_id)
    if removed:
        await m.answer(f"üóë –£–¥–∞–ª–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ <code>{ad_id}</code> –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")
    else:
        await m.answer("–ù–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–µ–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç).")

@dp.message(Command("post_oldest"))
async def cmd_post_oldest(m: Message):
    if not _is_admin(m):
        return await m.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
    row = get_oldest()
    if not row:
        return await m.answer("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
    ad_id, text = row

    # –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª
    await safe_send_channel(text)

    # —á–∏—Å—Ç–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö (–≤–∫–ª—é—á–∞—è –∏—Å—Ö–æ–¥–Ω—ã–π)
    similar = find_similar_ids(ad_id, threshold=0.88)
    removed = bulk_delete([ad_id] + similar)

    # –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω–∞–º
    now_h = _now_str()
    await _notify_admins(
        f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ ({now_h}). ID: <code>{ad_id}</code>. "
        f"–£–¥–∞–ª–µ–Ω–æ –ø–æ—Ö–æ–∂–∏—Ö (–≤–∫–ª—é—á–∞—è –∏—Å—Ö–æ–¥–Ω—ã–π): <b>{removed}</b>."
    )

    # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî —Å–ª—É–∂–µ–±–Ω—ã–π –ª–æ–≥ –≤ –∫–∞–Ω–∞–ª
    if POST_REPORT_TO_CHANNEL:
        await safe_send_channel(f"‚ÑπÔ∏è –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω. ID: {ad_id}. –£–¥–∞–ª–µ–Ω–æ –ø–æ—Ö–æ–∂–∏—Ö: {removed}.")

    await m.answer(
        "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª.\n"
        f"üóë –£–¥–∞–ª–µ–Ω–æ (–≤–º–µ—Å—Ç–µ —Å –ø–æ—Ö–æ–∂–∏–º–∏): <b>{removed}</b>"
    )

# ---------------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ----------------
async def main():
    init_db()
    log.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –¥–ª—è %s (TZ=%s)", CHANNEL_ID, TZ)
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

if __name__ == "__main__":
    asyncio.run(main())
