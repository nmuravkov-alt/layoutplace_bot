# main.py
import asyncio
import logging
import os
from datetime import datetime
from zoneinfo import ZoneInfo
from html import escape as _escape

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandObject
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message

from storage.db import (
    init_db,
    enqueue as db_enqueue,
    get_oldest,
    delete_by_id,
    find_similar_ids,
    bulk_delete,
)

# -------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è --------------------
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
CHANNEL_ID = os.getenv("CHANNEL_ID", "").strip()
ADMINS_RAW = os.getenv("ADMINS", "").strip()
TZ = os.getenv("TZ", "Europe/Moscow")

if not BOT_TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")
if not CHANNEL_ID:
    raise RuntimeError("‚ùå CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω!")

ADMINS: set[int] = set()
for piece in (ADMINS_RAW or "").replace(" ", "").split(","):
    if piece:
        try:
            ADMINS.add(int(piece))
        except ValueError:
            pass

# -------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ --------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("layoutplace_bot")

# -------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ --------------------
def safe_html(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML, —á—Ç–æ–±—ã Telegram –Ω–µ —Ä—É–≥–∞–ª—Å—è –Ω–∞ < >"""
    return _escape(text, quote=False)

def now_str() -> str:
    tz = ZoneInfo(TZ)
    return datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S")

def is_admin(m: Message) -> bool:
    return m.from_user and m.from_user.id in ADMINS

async def send_to_channel(bot: Bot, text: str):
    await bot.send_message(
        chat_id=CHANNEL_ID,
        text=safe_html(text),
        disable_web_page_preview=False,
    )

def _ad_fields(ad) -> tuple[int, str]:
    if ad is None:
        return (0, "")
    if isinstance(ad, dict):
        return int(ad.get("id", 0)), str(ad.get("text", ""))
    try:
        return int(ad[0]), str(ad[1])
    except Exception:
        return (0, "")

async def post_oldest_and_cleanup(bot: Bot, reply_to: Message | None = None):
    ad = get_oldest()
    ad_id, ad_text = _ad_fields(ad)
    if not ad_id or not ad_text.strip():
        msg = "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ ‚Äî –Ω–µ—á–µ–≥–æ –ø–æ—Å—Ç–∏—Ç—å."
        if reply_to:
            await reply_to.answer(msg)
        else:
            log.info(msg)
        return

    await send_to_channel(bot, ad_text)
    similar_ids = set(find_similar_ids(ad_text) or [])
    similar_ids.add(ad_id)
    bulk_delete(list(similar_ids))

    msg = f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ {len(similar_ids)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π."
    if reply_to:
        await reply_to.answer(msg)
    else:
        log.info(msg)

# -------------------- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ --------------------
async def main():
    init_db()

    bot = Bot(
        BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    )
    dp = Dispatcher(storage=MemoryStorage())

    @dp.message(Command("start"))
    async def cmd_start(m: Message):
        text = (
            "‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n\n"
            "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            "/myid ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π Telegram ID\n"
            "/enqueue <—Ç–µ–∫—Å—Ç> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å\n"
            "/post_oldest ‚Äî –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n"
            "/queue ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ\n"
            "/now ‚Äî —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞\n"
        )
        await m.answer(text)

    @dp.message(Command("myid"))
    async def cmd_myid(m: Message):
        await m.answer(f"–¢–≤–æ–π Telegram ID: <code>{m.from_user.id}</code>")

    @dp.message(Command("now"))
    async def cmd_now(m: Message):
        await m.answer(f"üïí –°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: <b>{now_str()}</b>")

    @dp.message(Command("enqueue"))
    async def cmd_enqueue(m: Message, command: CommandObject):
        if not is_admin(m):
            return await m.answer("‚õî –ù–µ—Ç –ø—Ä–∞–≤.")

        text = (command.args or "").strip()
        if not text:
            return await m.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /enqueue –¢–ï–ö–°–¢_–û–ë–™–Ø–í–õ–ï–ù–ò–Ø")

        db_enqueue(text)
        await m.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å.")

    @dp.message(Command("post_oldest"))
    async def cmd_post_oldest(m: Message):
        if not is_admin(m):
            return await m.answer("‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
        await post_oldest_and_cleanup(bot, reply_to=m)

    @dp.message(Command("queue"))
    async def cmd_queue(m: Message):
        if not is_admin(m):
            return await m.answer("‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
        from storage.db import _cx
        with _cx() as cx:
            count = cx.execute("SELECT COUNT(*) FROM ads").fetchone()[0]
        await m.answer(f"üì¶ –°–µ–π—á–∞—Å –≤ –æ—á–µ—Ä–µ–¥–∏: <b>{count}</b> –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")

    log.info(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –¥–ª—è {CHANNEL_ID} (TZ={TZ})")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        pass
