# main.py
import os
import asyncio
import logging
import time
from datetime import datetime
from zoneinfo import ZoneInfo
from typing import Optional, Dict, Any, List

from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from aiogram.filters import Command, CommandObject

# ---- –∫–æ–Ω—Ñ–∏–≥ ----
from config import TOKEN as BOT_TOKEN, ADMINS as _ADMINS_LIST, CHANNEL_ID as _CHANNEL_ID, TZ as _TZ

# ---- —Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π ----
from storage.db import (
    init_db,
    db_enqueue,
    get_oldest,
    find_similar_ids,
    bulk_delete,
    queue_add,
    queue_count_pending,
)

# ---------------- –õ–û–ì–ò ----------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(name)s | %(message)s")
log = logging.getLogger("layoutplace_bot")

# ---------------- CONFIG ----------------
ADMINS: List[int] = [469734432, 6773668793]  # —Ç–≤–æ–∏ ID
CHANNEL_ID: str | int = _CHANNEL_ID
TZ: str = _TZ
tz = ZoneInfo(TZ)

def now_str() -> str:
    return datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S")

def is_admin(uid: Optional[int]) -> bool:
    return uid is not None and int(uid) in ADMINS

# ---------------- –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ ----------------
def unify_caption(text: str | None) -> str:
    text = (text or "").strip()
    text = text.replace("–¶–µ–Ω–∞ -", "–¶–µ–Ω–∞ ‚Äî")
    while "  " in text:
        text = text.replace("  ", " ")
    lines = [ln.strip() for ln in text.splitlines() if ln.strip()]
    text = "\n".join(lines)
    if "layoutplacebuy" not in text.lower():
        text += "\n\n@layoutplacebuy"
    return text

# ---------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ----------------
props = DefaultBotProperties(parse_mode=ParseMode.HTML)
bot = Bot(BOT_TOKEN, default=props)
dp = Dispatcher(storage=MemoryStorage())

# ---------------- –ê–í–¢–û-–°–ë–û–† –ê–õ–¨–ë–û–ú–û–í ----------------
DEBOUNCE_SEC = 2.0
ALBUM_CACHE: Dict[int, Dict[str, Dict[str, Any]]] = {}
ALBUM_TIMERS: Dict[tuple, asyncio.Task] = {}

def _album_cache_touch(user_id: int, mgid: str, source_chat_id: int, fwd_mid: int, caption: Optional[str]):
    u = ALBUM_CACHE.setdefault(user_id, {})
    rec = u.get(mgid)
    if not rec:
        rec = {"source_chat_id": int(source_chat_id), "ids": set(), "caption": "", "last_ts": 0}
        u[mgid] = rec
    rec["ids"].add(int(fwd_mid))
    if caption and not rec["caption"]:
        rec["caption"] = caption
    rec["last_ts"] = int(time.time())

def _album_cache_pop(user_id: int, mgid: str) -> Optional[Dict[str, Any]]:
    u = ALBUM_CACHE.get(user_id)
    if not u:
        return None
    return u.pop(mgid, None)

def _cancel_timer(user_id: int, mgid: str):
    key = (user_id, mgid)
    t = ALBUM_TIMERS.pop(key, None)
    if t and not t.done():
        t.cancel()

async def _finalize_album(user_id: int, mgid: str):
    rec = _album_cache_pop(user_id, mgid)
    if not rec:
        return
    ids_sorted: List[int] = sorted(rec["ids"])
    qid = queue_add(
        source_chat_id=int(rec["source_chat_id"]),
        message_ids=ids_sorted,
        caption_override=unify_caption(rec.get("caption") or "")
    )
    try:
        await bot.send_message(
            chat_id=user_id,
            text=(f"‚úÖ –ê–ª—å–±–æ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: <code>{qid}</code>\n"
                  f"–≠–ª–µ–º–µ–Ω—Ç–æ–≤: <b>{len(ids_sorted)}</b>"),
            disable_web_page_preview=True
        )
    except Exception:
        pass

def _debounce_album_finalize(user_id: int, mgid: str):
    _cancel_timer(user_id, mgid)
    async def _task():
        await asyncio.sleep(DEBOUNCE_SEC)
        await _finalize_album(user_id, mgid)
    t = asyncio.create_task(_task())
    ALBUM_TIMERS[(user_id, mgid)] = t

@dp.message(F.forward_from_chat & F.media_group_id)
async def on_forwarded_album_piece(m: Message):
    if not is_admin(m.from_user.id):
        return
    try:
        source_chat_id = m.forward_from_chat.id
        fwd_mid = m.forward_from_message_id
        mgid = str(m.media_group_id)
        caption = m.caption or m.text or ""
        if source_chat_id and fwd_mid and mgid:
            _album_cache_touch(m.from_user.id, mgid, int(source_chat_id), int(fwd_mid), caption)
            _debounce_album_finalize(m.from_user.id, mgid)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –∞–ª—å–±–æ–º–∞: %s", e)

# ---------------- –ë–ê–ó–û–í–´–ï –ö–û–ú–ê–ù–î–´ ----------------
@dp.message(Command("start"))
async def cmd_start(m: Message):
    help_text = (
        "–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/myid ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π Telegram ID\n"
        "/enqueue <—Ç–µ–∫—Å—Ç> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ –æ—á–µ—Ä–µ–¥—å\n"
        "/queue ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–µ–π\n"
        "/post_oldest ‚Äî –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å—Ç–∞—Ä–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n"
        "/add_post ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–∏–Ω–æ—á–Ω—ã–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞\n"
        "/clear_albums_cache ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –±—É—Ñ–µ—Ä –∞–ª—å–±–æ–º–æ–≤\n"
        "/test_preview ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É\n"
        "/now ‚Äî —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"
    )
    await m.answer(help_text, disable_web_page_preview=True)

@dp.message(Command("myid"))
async def cmd_myid(m: Message):
    await m.answer(f"–¢–≤–æ–π Telegram ID: <code>{m.from_user.id}</code>")

@dp.message(Command("now"))
async def cmd_now(m: Message):
    await m.answer(f"–°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: <b>{now_str()}</b> ({TZ})")

@dp.message(Command("clear_albums_cache"))
async def cmd_clear_cache(m: Message):
    if not is_admin(m.from_user.id):
        return await m.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
    ALBUM_CACHE.pop(m.from_user.id, None)
    to_cancel = [k for k in list(ALBUM_TIMERS.keys()) if k[0] == m.from_user.id]
    for key in to_cancel:
        t = ALBUM_TIMERS.pop(key, None)
        if t and not t.done():
            t.cancel()
    await m.answer("–ë—É—Ñ–µ—Ä –∞–ª—å–±–æ–º–æ–≤ –æ—á–∏—â–µ–Ω.")

@dp.message(Command("enqueue"))
async def cmd_enqueue(m: Message, command: CommandObject):
    if not is_admin(m.from_user.id):
        return await m.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
    text = (command.args or "").strip()
    if not text:
        return await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /enqueue <—Ç–µ–∫—Å—Ç>")
    text = unify_caption(text)
    ad_id = db_enqueue(text)
    await m.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: <code>{ad_id}</code>")

@dp.message(Command("queue"))
async def cmd_queue(m: Message):
    count_text = 1 if get_oldest() else 0
    count_copy = queue_count_pending()
    await m.answer(f"–û—á–µ—Ä–µ–¥—å —Ç–µ–∫—Å—Ç–∞: {count_text}\n–û—á–µ—Ä–µ–¥—å –∫–æ–ø–∏–π: {count_copy}")

@dp.message(Command("post_oldest"))
async def cmd_post_oldest(m: Message):
    if not is_admin(m.from_user.id):
        return await m.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
    oldest = get_oldest()
    if not oldest:
        return await m.answer("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
    ad_id, text = oldest["id"], oldest["text"]
    await bot.send_message(CHANNEL_ID, text)
    similar = find_similar_ids(ad_id, threshold=0.88)
    removed = bulk_delete([ad_id] + similar)
    await m.answer(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {ad_id}\n–£–¥–∞–ª–µ–Ω–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {removed}")

# ---------------- –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É ----------------
@dp.message(Command("test_preview"))
async def cmd_test_preview(message: types.Message):
    sent = 0
    for admin_id in ADMINS:
        try:
            await bot.send_message(
                admin_id,
                f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Ä–∞–±–æ—Ç–∞–µ—Ç!\nüïí {now_str()}",
                disable_web_page_preview=True
            )
            sent += 1
        except Exception as e:
            log.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    if sent > 0:
        await message.answer("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º.")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

# ---------------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ----------------
async def main():
    init_db()
    me = await bot.me()
    log.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @%s (TZ=%s)", me.username, TZ)
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

if __name__ == "__main__":
    asyncio.run(main())
