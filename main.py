import os
import asyncio
import logging
import pytz
import time
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InputMediaPhoto, InputMediaVideo
from aiogram.filters import Command

from storage.db import init_db, enqueue, dequeue_oldest, mark_posted, mark_error, get_count, list_queue

# -----------------------------
# CONFIG (—á–∏—Ç–∞–µ–º –∏–∑ ENV)
# -----------------------------
TOKEN = os.getenv("TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID", "-1001758490510"))
ADMINS = [int(x) for x in os.getenv("ADMINS", "").split(",") if x]
ALBUM_URL = os.getenv("ALBUM_URL", "")
CONTACT = os.getenv("CONTACT", "")
TZ = os.getenv("TZ", "Europe/Moscow")
POST_TIMES = os.getenv("POST_TIMES", "12:00,16:00,20:00").split(",")
PREVIEW_BEFORE_MIN = int(os.getenv("PREVIEW_BEFORE_MIN", "45"))
DB_PATH = os.getenv("DB_PATH", "/data/layoutplace.db")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ (–ø–æ–¥—Ç–≤. –ø–æ —Ç–≤–æ–µ–º—É —Ñ–æ—Ä–º–∞—Ç—É)
if not TOKEN or ":" not in TOKEN:
    raise RuntimeError("ENV TOKEN –ø—É—Å—Ç –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ó–∞–¥–∞–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞.")

# -----------------------------
# LOGGING
# -----------------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("layoutplace_bot")

# -----------------------------
# INIT
# -----------------------------
bot = Bot(TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î (–ø—É—Ç—å –±–µ—Ä—ë–º –∏–∑ ENV)
init_db(DB_PATH)
logger.info("üöÄ –°—Ç–∞—Ä—Ç—É–µ–º Layoutplace Bot...")

tz = pytz.timezone(TZ)

# -----------------------------
# HELPERS
# -----------------------------
def normalize_text(text: str) -> str:
    """–ü—Ä–∏–≤–æ–¥–∏–º –ø–æ–¥–ø–∏—Å—å –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ö–≤–æ—Å—Ç—ã."""
    if not text:
        text = ""
    lines = [line.strip() for line in text.split("\n")]
    lines = [l for l in lines if l]  # —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ

    new_lines = []
    for line in lines:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º '–¶–µ–Ω–∞'
        if line.lower().startswith("—Ü–µ–Ω–∞"):
            # –∑–∞–º–µ–Ω—è–µ–º –¥–≤–æ–µ—Ç–æ—á–∏–µ/–¥–µ—Ñ–∏—Å –Ω–∞ –¥–ª–∏–Ω–Ω–æ–µ —Ç–∏—Ä–µ
            line = line.replace(":", "‚Äî").replace("-", "‚Äî")
        new_lines.append(line)

    # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ —Ö–≤–æ—Å—Ç–æ–º
    if new_lines and new_lines[-1] != "":
        new_lines.append("")

    # –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ö–≤–æ—Å—Ç—ã (–∫–∞–∫ –ø—Ä–æ—Å–∏–ª)
    new_lines.append(f"–û–±—â–∏–π –∞–ª—å–±–æ–º: {ALBUM_URL}")
    new_lines.append(f"–ü–æ–∫—É–ø–∫–∞/–≤–æ–ø—Ä–æ—Å—ã: {CONTACT}")

    return "\n".join(new_lines).strip()

async def send_preview_to_admins(text: str):
    for admin_id in ADMINS:
        try:
            await bot.send_message(admin_id, f"üîú –ü—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ {PREVIEW_BEFORE_MIN} –º–∏–Ω:\n\n{text}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–≤—å—é {admin_id}: {e}")

async def post_to_channel(items, caption, qid=None):
    """–ü–æ—Å—Ç–∏–Ω–≥ –∞–ª—å–±–æ–º–∞ (–∏–ª–∏ –æ–¥–Ω–æ–≥–æ –º–µ–¥–∏–∞) —Å –ø–æ–¥–ø–∏—Å—å—é –≤ –∫–∞–Ω–∞–ª."""
    media_group = []
    for i, item in enumerate(items or []):
        if item.get("type") == "photo":
            media = InputMediaPhoto(media=item["file_id"], caption=caption if i == 0 else None)
        elif item.get("type") == "video":
            media = InputMediaVideo(media=item["file_id"], caption=caption if i == 0 else None)
        else:
            continue
        media_group.append(media)

    try:
        if media_group:
            await bot.send_media_group(CHANNEL_ID, media=media_group)
        else:
            # –Ω–µ—Ç –º–µ–¥–∏–∞ ‚Äî –ø—É–±–ª–∏–∫—É–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            await bot.send_message(CHANNEL_ID, caption)

        if qid:
            mark_posted(qid)
        logger.info(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å—Ç ID={qid}")
    except Exception as e:
        if qid:
            mark_error(qid, str(e))
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

# -----------------------------
# COMMANDS
# -----------------------------
@dp.message(Command("start"))
async def cmd_start(m: Message):
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ü–µ—Ä–µ—à–ª–∏ –º–Ω–µ –ø–æ—Å—Ç (–∏–∑ –∫–∞–Ω–∞–ª–∞) —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º ‚Äî —è –ø–æ—Å—Ç–∞–≤–ª—é –µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥—å.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/queue ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å\n"
        "/post_oldest ‚Äî –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –ø–æ—Å—Ç –≤—Ä—É—á–Ω—É—é"
    )

@dp.message(Command("queue"))
async def cmd_queue(m: Message):
    total = get_count()
    queued = get_count("queued")
    posted = get_count("posted")
    err = get_count("error")
    rows = list_queue(15)
    lines = [f"–í—Å–µ–≥–æ: {total} | queued: {queued} | posted: {posted} | error: {err}", ""]
    for r in rows:
        t = time.strftime("%d.%m %H:%M", time.localtime(r["created_at"]))
        lines.append(f"#{r['id']} [{r['status']}] {t}")
    await m.answer("\n".join(lines))

@dp.message(Command("post_oldest"))
async def cmd_post_oldest(m: Message):
    row = dequeue_oldest()
    if not row:
        await m.answer("‚ùå –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
        return
    import json
    items = json.loads(row["items_json"]) if row.get("items_json") else []
    await post_to_channel(items, row["caption"], row["id"])
    await m.answer(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å—Ç #{row['id']} –≤—Ä—É—á–Ω—É—é.")

# -----------------------------
# HANDLER ‚Äî –ü–ï–†–ï–°–´–õ–ö–ê –ü–û–°–¢–û–í
# -----------------------------
@dp.message(F.forward_from_chat)
async def handle_forwarded_post(m: Message):
    """–î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–π –ø–æ—Å—Ç (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ + —Ç–µ–∫—Å—Ç) –≤ –æ—á–µ—Ä–µ–¥—å."""
    try:
        caption_raw = m.caption or m.text or ""
        caption = normalize_text(caption_raw)

        items = []
        # –æ–¥–∏–Ω–æ—á–Ω—ã–µ –º–µ–¥–∏–∞
        if m.photo:
            items.append({"type": "photo", "file_id": m.photo[-1].file_id})
        elif m.video:
            items.append({"type": "video", "file_id": m.video.file_id})

        # –ê–ª—å–±–æ–º (media group) ‚Äî —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–∑ –∞–ª—å–±–æ–º–∞
        if m.media_group_id:
            # aiogram —Å–∞–º –Ω–µ –∞–≥—Ä–µ–≥–∏—Ä—É–µ—Ç ‚Äî —Ç—É—Ç –æ–±—ã—á–Ω–æ –Ω—É–∂–µ–Ω storage –¥–ª—è –≥—Ä—É–ø–ø.
            # –£–ø—Ä–æ—Å—Ç–∏–º: –µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∫–∞–∫ —á–∞—Å—Ç—å –∞–ª—å–±–æ–º–∞, –æ–Ω –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–ø–∞–¥—ë—Ç —Å—é–¥–∞
            # –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —Å–∫–ª–µ–∏–≤–∞–Ω–∏—è –∞–ª—å–±–æ–º–∞ –Ω—É–∂–µ–Ω —Ö–µ–Ω–¥–ª–µ—Ä
            # —Å –±—É—Ñ–µ—Ä–æ–º –ø–æ media_group_id. (–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ.)
            pass

        src_chat_id = m.forward_from_chat.id if m.forward_from_chat else None
        src_msg_id = m.forward_from_message_id if m.forward_from_message_id else None

        qid = enqueue(items, caption, src=(src_chat_id, src_msg_id))
        await m.answer(f"‚úÖ –ü–æ—Å—Ç #{qid} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –∏ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å—Ç #{qid}")
    except Exception as e:
        await m.answer(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ handle_forwarded_post: {e}")

# -----------------------------
# SCHEDULER
# -----------------------------
async def scheduler():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –ø—Ä–µ–≤—å—é –∑–∞ PREVIEW_BEFORE_MIN –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ —Å–ª–æ—Ç—ã POST_TIMES."""
    logger.info(f"Scheduler TZ={TZ}, times={POST_TIMES}, preview_before={PREVIEW_BEFORE_MIN} –º–∏–Ω")
    while True:
        now = datetime.now(tz)
        for t_str in POST_TIMES:
            try:
                hh, mm = map(int, t_str.split(":"))
            except Exception:
                continue

            slot = now.replace(hour=hh, minute=mm, second=0, microsecond=0)

            # –ü—Ä–µ–≤—å—é: –æ–∫–Ω–æ (now, now+PREVIEW_BEFORE]
            if now < slot <= now + timedelta(minutes=PREVIEW_BEFORE_MIN):
                row = dequeue_oldest()
                if row:
                    await send_preview_to_admins(row["caption"])

            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è: ¬±30 c–µ–∫—É–Ω–¥ –æ—Ç —Å–ª–æ—Ç–∞
            if abs((now - slot).total_seconds()) < 30:
                row = dequeue_oldest()
                if row:
                    import json
                    items = json.loads(row["items_json"]) if row.get("items_json") else []
                    await post_to_channel(items, row["caption"], row["id"])

        await asyncio.sleep(30)

# -----------------------------
# START FUNCTIONS
# -----------------------------
async def main():
    # –í–∞–∂–Ω–æ: —Å–±—Ä–æ—Å–∏—Ç—å webhook –∏ –æ—á–∏—Å—Ç–∏—Ç—å pending, —á—Ç–æ–±—ã getUpdates –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª
    await bot.delete_webhook(drop_pending_updates=True)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    asyncio.create_task(scheduler())
    logger.info("Scheduler –∑–∞–ø—É—â–µ–Ω.")
    # –°—Ç–∞—Ä—Ç—É–µ–º polling
    await dp.start_polling(bot)

def run_bot():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è runner.py"""
    asyncio.run(main())

# –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ runner.py
if __name__ == "__main__":
    run_bot()
