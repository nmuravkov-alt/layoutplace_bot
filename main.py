# main.py
import asyncio
import logging
import os
from datetime import datetime
from html import escape as html_escape

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandObject
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from aiogram.exceptions import TelegramBadRequest

from storage.db import (
    init_db,
    enqueue as db_enqueue,
    get_oldest,
    delete_by_id,
    find_similar_ids,
    bulk_delete,
)

# ---------------- –ö–æ–Ω—Ñ–∏–≥ ----------------
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
CHANNEL_ID = os.getenv("CHANNEL_ID", "").strip()
ADMINS_RAW = os.getenv("ADMINS", "").strip()
TZ = os.getenv("TZ", "Europe/Moscow")

ADMINS: set[int] = set()
for part in ADMINS_RAW.replace(";", ",").split(","):
    p = part.strip()
    if not p:
        continue
    try:
        ADMINS.add(int(p))
    except ValueError:
        pass

# ---------------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("layoutplace_bot")

# ---------------- –ë–æ—Ç ----------------
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# ---------------- –£—Ç–∏–ª–∏—Ç—ã ----------------
def _is_admin(m: Message) -> bool:
    return bool(m.from_user and m.from_user.id in ADMINS)

async def safe_send_channel(text: str):
    """
    –®–ª—ë–º –≤ –∫–∞–Ω–∞–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ –∫–∞–∫ HTML, –ø—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º.
    """
    try:
        await bot.send_message(CHANNEL_ID, text, disable_web_page_preview=False)
    except TelegramBadRequest:
        await bot.send_message(CHANNEL_ID, html_escape(text), parse_mode=None, disable_web_page_preview=False)

# ---------------- –ö–æ–º–∞–Ω–¥—ã ----------------
@dp.message(Command("start"))
async def cmd_start(m: Message):
    help_text = (
        "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/myid ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π Telegram ID\n"
        "/enqueue &lt;—Ç–µ–∫—Å—Ç&gt; ‚Äî –ø–æ–ª–æ–∂–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å (–∞–¥–º–∏–Ω—ã)\n"
        "/queue ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ (–∞–¥–º–∏–Ω—ã)\n"
        "/post_oldest ‚Äî –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ –∏ —É–¥–∞–ª–∏—Ç—å –ø–æ—Ö–æ–∂–∏–µ (–∞–¥–º–∏–Ω—ã)\n"
        "/now ‚Äî —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞\n"
    )
    await m.answer(help_text)

@dp.message(Command("myid"))
async def cmd_myid(m: Message):
    await m.answer(f"–¢–≤–æ–π Telegram ID: <code>{m.from_user.id}</code>")

@dp.message(Command("now"))
async def cmd_now(m: Message):
    now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    await m.answer(f"<b>–°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è:</b> {now_str} ({TZ})")

@dp.message(Command("enqueue"))
async def cmd_enqueue(m: Message, command: CommandObject):
    if not _is_admin(m):
        return await m.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
    text = (command.args or "").strip()
    if not text:
        return await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /enqueue &lt;—Ç–µ–∫—Å—Ç&gt;")
    ad_id = db_enqueue(text)
    await m.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å. ID: <code>{ad_id}</code>")

@dp.message(Command("queue"))
async def cmd_queue(m: Message):
    if not _is_admin(m):
        return await m.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
    count = get_oldest(count_only=True)  # —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ storage/db.py
    await m.answer(f"üì¶ –í –æ—á–µ—Ä–µ–¥–∏: <b>{count}</b>")

@dp.message(Command("post_oldest"))
async def cmd_post_oldest(m: Message):
    if not _is_admin(m):
        return await m.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
    row = get_oldest()
    if not row:
        return await m.answer("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
    ad_id, text = row
    # –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç HTML
    await safe_send_channel(text)
    # —É–¥–∞–ª–∏—Ç—å –ø–æ—Ö–æ–∂–∏–µ + —Å–∞–º –ø–æ—Å—Ç
    similar = find_similar_ids(ad_id, threshold=0.88)
    removed = bulk_delete([ad_id] + similar)
    await m.answer(
        "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª.\n"
        f"üóë –£–¥–∞–ª–µ–Ω–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (–≤–∫–ª—é—á–∞—è –ø–æ—Ö–æ–∂–∏–µ): <b>{removed}</b>"
    )

# ---------------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ----------------
async def main():
    # init_db —É –Ω–∞—Å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è ‚Äî –±–µ–∑ await
    init_db()
    log.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –¥–ª—è %s (TZ=%s)", CHANNEL_ID, TZ)
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

if __name__ == "__main__":
    asyncio.run(main())
