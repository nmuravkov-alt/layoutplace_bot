# main.py
import os
import asyncio
import logging
import time
from datetime import datetime
from zoneinfo import ZoneInfo
from typing import Optional, Dict, Any, List

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from aiogram.filters import Command, CommandObject

from storage.db import (
    init_db,
    db_enqueue,
    get_oldest,
    delete_by_id,
    find_similar_ids,
    bulk_delete,
    queue_add,
)

logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(name)s | %(message)s")
log = logging.getLogger("layoutplace_bot")

# ---------------- ENV ----------------
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
CHANNEL_ID = os.getenv("CHANNEL_ID", "").strip()  # @username –∏–ª–∏ -100...
ADMINS_RAW = os.getenv("ADMINS", "").strip()
ADMINS = [a.strip() for a in ADMINS_RAW.split(",") if a.strip()]
TZ_NAME = os.getenv("TZ", "Europe/Moscow")
tz = ZoneInfo(TZ_NAME)

def now_str() -> str:
    return datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S")

def is_admin(uid: Optional[int]) -> bool:
    return uid is not None and (str(uid) in ADMINS)

def unify_caption(text: str | None) -> str:
    """
    –ü—Ä–∏–≤–æ–¥–∏–º –ø–æ–¥–ø–∏—Å—å –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É (–∫–∞–∫ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–ª–∏—Å—å).
    """
    text = (text or "").strip()
    # –∫–æ—Å–º–µ—Ç–∏–∫–∞ —Ç–∏—Ä–µ/–ø—Ä–æ–±–µ–ª–æ–≤/–ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
    text = text.replace("–¶–µ–Ω–∞ -", "–¶–µ–Ω–∞ ‚Äî")
    while "  " in text:
        text = text.replace("  ", " ")
    lines = [ln.strip() for ln in text.splitlines() if ln.strip()]
    text = "\n".join(lines)
    # –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç, –µ—Å–ª–∏ –Ω–µ—Ç
    if "layoutplacebuy" not in text.lower():
        text += "\n\n@layoutplacebuy"
    return text

props = DefaultBotProperties(parse_mode=ParseMode.HTML, disable_web_page_preview=True)
bot = Bot(BOT_TOKEN, default=props)
dp = Dispatcher(storage=MemoryStorage())

# ---------------- –ê–í–¢–û-–ê–ª—å–±–æ–º—ã: –∫—ç—à + –¥–µ–±–∞—É–Ω—Å ----------------
# –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º —á–∞—Å—Ç–∏ –∞–ª—å–±–æ–º–∞ –ø–æ media_group_id –∏ –∞–≤—Ç–æ-–¥–æ–±–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ DEBOUNCE_SEC –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
DEBOUNCE_SEC = 2.0

# { admin_id: { mgid: {"source_chat_id": int, "ids": set[int], "caption": str, "last_ts": int} } }
ALBUM_CACHE: Dict[int, Dict[str, Dict[str, Any]]] = {}
# —Ç–∞–π–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–±–æ—Ä–∞: { (admin_id, mgid): asyncio.Task }
ALBUM_TIMERS: Dict[tuple, asyncio.Task] = {}

def _album_cache_get(user_id: int, mgid: str) -> Optional[Dict[str, Any]]:
    return ALBUM_CACHE.get(user_id, {}).get(mgid)

def _album_cache_touch(user_id: int, mgid: str, source_chat_id: int, fwd_mid: int, caption: Optional[str]):
    u = ALBUM_CACHE.setdefault(user_id, {})
    rec = u.get(mgid)
    if not rec:
        rec = {"source_chat_id": int(source_chat_id), "ids": set(), "caption": "", "last_ts": 0}
        u[mgid] = rec
    rec["ids"].add(int(fwd_mid))
    if caption and not rec["caption"]:
        rec["caption"] = caption
    rec["last_ts"] = int(time.time())

def _album_cache_pop(user_id: int, mgid: str) -> Optional[Dict[str, Any]]:
    u = ALBUM_CACHE.get(user_id)
    if not u:
        return None
    return u.pop(mgid, None)

def _cancel_timer(user_id: int, mgid: str):
    key = (user_id, mgid)
    t = ALBUM_TIMERS.pop(key, None)
    if t and not t.done():
        t.cancel()

async def _finalize_album(user_id: int, mgid: str):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ç–∞–π–º–µ—Ä—É —á–µ—Ä–µ–∑ DEBOUNCE_SEC –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ –∞–ª—å–±–æ–º–∞.
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ—Å—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
    """
    rec = _album_cache_pop(user_id, mgid)
    if not rec:
        return
    ids_sorted: List[int] = sorted(rec["ids"])
    qid = queue_add(
        source_chat_id=int(rec["source_chat_id"]),
        message_ids=ids_sorted,
        caption_override=unify_caption(rec.get("caption") or "")
    )
    # —É–≤–µ–¥–æ–º–∏–º –∞–¥–º–∏–Ω–∞
    try:
        await bot.send_message(
            chat_id=user_id,
            text=(f"‚úÖ –ê–ª—å–±–æ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: <code>{qid}</code>\n"
                  f"–≠–ª–µ–º–µ–Ω—Ç–æ–≤: <b>{len(ids_sorted)}</b>")
        )
    except Exception:
        pass

def _debounce_album_finalize(user_id: int, mgid: str):
    """
    –°–±—Ä–∞—Å—ã–≤–∞–µ–º (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º) —Ç–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–±–æ—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–ª—å–±–æ–º–∞.
    """
    _cancel_timer(user_id, mgid)
    async def _task():
        await asyncio.sleep(DEBOUNCE_SEC)
        await _finalize_album(user_id, mgid)
    t = asyncio.create_task(_task())
    ALBUM_TIMERS[(user_id, mgid)] = t

# ---------------- –•—ç–Ω–¥–ª–µ—Ä: –ª–æ–≤–∏–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ/–º–µ–¥–∏–∞–≥—Ä—É–ø–ø–æ–π ----------------
@dp.message(F.forward_from_chat & F.media_group_id)
async def on_forwarded_album_piece(m: Message):
    """
    –ê–¥–º–∏–Ω –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∞–ª—å–±–æ–º–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ –±–æ—Ç—É.
    –ú—ã –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º forward_from_message_id –ø–æ media_group_id.
    –ü–æ—Å–ª–µ –ø–∞—É–∑—ã DEBOUNCE_SEC –∞–≤—Ç–æ-–¥–æ–±–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º –≤ –æ—á–µ—Ä–µ–¥—å.
    """
    if not is_admin(m.from_user.id):
        return
    try:
        source_chat_id = m.forward_from_chat.id          # –∏—Å—Ö–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª
        fwd_mid = m.forward_from_message_id              # message_id –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–∞–Ω–∞–ª–µ
        mgid = str(m.media_group_id)                     # –æ–±—â–∏–π media_group_id (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø—Ä–∏ forward)
        caption = m.caption or m.text or ""
        if source_chat_id and fwd_mid and mgid:
            _album_cache_touch(m.from_user.id, mgid, int(source_chat_id), int(fwd_mid), caption)
            _debounce_album_finalize(m.from_user.id, mgid)
    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –∞–ª—å–±–æ–º–∞: %s", e)

# ---------------- –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã ----------------
@dp.message(Command("start"))
async def cmd_start(m: Message):
    help_text = (
        "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã</b>:\n"
        "/myid ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π Telegram ID\n"
        "/enqueue &lt;—Ç–µ–∫—Å—Ç&gt; ‚Äî –ø–æ–ª–æ–∂–∏—Ç—å <i>—Ç–µ–∫—Å—Ç–æ–≤–æ–µ</i> –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å (—Å—Ç–∞—Ä—ã–π —Ä–µ–∂–∏–º)\n"
        "/queue ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–µ–π\n"
        "/post_oldest ‚Äî –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ (—Å—Ç–∞—Ä—ã–π —Ä–µ–∂–∏–º)\n"
        "/add_post &lt;—Å—Å—ã–ª–∫–∞-–Ω–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ&gt; ‚Äî –¥–æ–±–∞–≤–∏—Ç—å <i>–æ–¥–∏–Ω–æ—á–Ω—ã–π</i> –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ –≤ –æ—á–µ—Ä–µ–¥—å –∫–æ–ø–∏–π\n"
        "/clear_albums_cache ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –±—É—Ñ–µ—Ä –∞–ª—å–±–æ–º–æ–≤\n"
        "/now ‚Äî —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (TZ)\n\n"
        "üí° –ê–ª—å–±–æ–º—ã —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è <b>–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b>: –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏ –±–æ—Ç—É <u>–≤—Å–µ —Ñ–æ—Ç–æ –∞–ª—å–±–æ–º–∞</u> –∏–∑ –∫–∞–Ω–∞–ª–∞ –ø–æ–¥—Ä—è–¥."
    )
    await m.answer(help_text)

@dp.message(Command("myid"))
async def cmd_myid(m: Message):
    await m.answer(f"–¢–≤–æ–π Telegram ID: <code>{m.from_user.id}</code>")

@dp.message(Command("now"))
async def cmd_now(m: Message):
    await m.answer(f"–°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: <b>{now_str()}</b> ({TZ_NAME})")

@dp.message(Command("clear_albums_cache"))
async def cmd_clear_cache(m: Message):
    if not is_admin(m.from_user.id):
        return await m.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
    ALBUM_CACHE.pop(m.from_user.id, None)
    # –æ—Ç–º–µ–Ω–∏–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
    to_cancel = [k for k in list(ALBUM_TIMERS.keys()) if k[0] == m.from_user.id]
    for key in to_cancel:
        t = ALBUM_TIMERS.pop(key, None)
        if t and not t.done():
            t.cancel()
    await m.answer("–ë—É—Ñ–µ—Ä –∞–ª—å–±–æ–º–æ–≤ –¥–ª—è —Ç–µ–±—è –æ—á–∏—â–µ–Ω.")

# --------- –°—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) ---------
@dp.message(Command("enqueue"))
async def cmd_enqueue(m: Message, command: CommandObject):
    if not is_admin(m.from_user.id):
        return await m.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
    text = (command.args or "").strip()
    if not text:
        return await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /enqueue <—Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è>")
    text = unify_caption(text)
    ad_id = db_enqueue(text)
    await m.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: <code>{ad_id}</code>")

@dp.message(Command("queue"))
async def cmd_queue(m: Message):
    from storage.db import queue_count_pending
    count_text = 1 if get_oldest() else 0
    count_copy = queue_count_pending()
    await m.answer(
        f"–û—á–µ—Ä–µ–¥—å –¢–ï–ö–°–¢: <b>{count_text}</b>\n"
        f"–û—á–µ—Ä–µ–¥—å –ö–û–ü–ò–ô: <b>{count_copy}</b>"
    )

@dp.message(Command("post_oldest"))
async def cmd_post_oldest(m: Message):
    if not is_admin(m.from_user.id):
        return await m.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
    oldest = get_oldest()
    if not oldest:
        return await m.answer("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
    ad_id, text = oldest["id"], oldest["text"]
    await bot.send_message(CHANNEL_ID, text)
    similar = find_similar_ids(ad_id, threshold=0.88)
    removed = bulk_delete([ad_id] + similar)
    await m.answer(
        f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ <code>{ad_id}</code> –≤ –∫–∞–Ω–∞–ª.\n"
        f"–£–¥–∞–ª–µ–Ω–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: <b>{removed}</b> (–≤–∫–ª—é—á–∞—è –ø–æ—Ö–æ–∂–∏–µ)."
    )

# ---------------- –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ —Ä–µ–ø–ª–∞—é ----------------
def _parse_link(arg: str):
    """
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
      - https://t.me/username/123
      - https://t.me/c/CHATID/123  (CHATID –±–µ–∑ -100, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (source_chat_id:int|str, [message_ids:list[int]])
    """
    arg = (arg or "").strip()
    if not arg.startswith("http"):
        return None
    try:
        parts = arg.split("/")
        if "/c/" in arg:
            # t.me/c/123456789/555
            idx = parts.index("c")
            raw = parts[idx+1]
            msg = int(parts[idx+2])
            chat_id = int("-100" + raw)
            return chat_id, [msg]
        else:
            # t.me/username/555
            username = parts[3]
            msg = int(parts[4])
            return username, [msg]
    except Exception:
        return None

@dp.message(Command("add_post"))
async def cmd_add_post(m: Message, command: CommandObject):
    if not is_admin(m.from_user.id):
        return await m.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
    args = (command.args or "").strip()

    # –í–∞—Ä–∏–∞–Ω—Ç 1: –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ –û–î–ò–ù–û–ß–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ
    if m.reply_to_message and m.reply_to_message.forward_from_chat:
        rm = m.reply_to_message
        if rm.media_group_id:
            return await m.answer("–≠—Ç–æ —á–∞—Å—Ç—å –∞–ª—å–±–æ–º–∞. –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏ –í–°–ï —Ñ–æ—Ç–æ ‚Äî –±–æ—Ç –¥–æ–±–∞–≤–∏—Ç –∞–ª—å–±–æ–º —Å–∞–º.")
        source_chat_id = rm.forward_from_chat.id
        fwd_mid = rm.forward_from_message_id
        if not fwd_mid:
            return await m.answer("–ù–µ –≤–∏–∂—É forward_from_message_id. –ü–µ—Ä–µ—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –µ—â—ë —Ä–∞–∑.")
        qid = queue_add(
            source_chat_id=source_chat_id,
            message_ids=[int(fwd_mid)],
            caption_override=unify_caption(rm.caption or rm.text or "")
        )
        return await m.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: <code>{qid}</code>")

    # –í–∞—Ä–∏–∞–Ω—Ç 2: –ø–æ —Å—Å—ã–ª–∫–µ
    parsed = _parse_link(args) if args else None
    if not parsed:
        return await m.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "‚Ä¢ –û—Ç–≤–µ—Ç–æ–º –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞: <code>/add_post</code>\n"
            "‚Ä¢ –ò–ª–∏: <code>/add_post https://t.me/username/123</code>\n"
            "     –∏–ª–∏ <code>/add_post https://t.me/c/123456789/123</code>\n\n"
            "üí° –î–ª—è –∞–ª—å–±–æ–º–æ–≤ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏ –≤—Å–µ —Ñ–æ—Ç–æ, –±–æ—Ç –¥–æ–±–∞–≤–∏—Ç —Å–∞–º."
        )
    source_chat, mids = parsed
    qid = queue_add(source_chat_id=source_chat if isinstance(source_chat, int) else source_chat,
                    message_ids=[int(x) for x in mids],
                    caption_override=None)
    await m.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: <code>{qid}</code>")

# ---------------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ----------------
async def main():
    init_db()
    log.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –¥–ª—è @%s (TZ=%s)", str(CHANNEL_ID).lstrip("@"), TZ_NAME)
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

if __name__ == "__main__":
    asyncio.run(main())
