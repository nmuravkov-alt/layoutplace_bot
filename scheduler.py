# scheduler.py
import os
import asyncio
import logging
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from html import escape as html_escape

from aiogram import Bot
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramBadRequest

# DB helpers
from storage.db import (
    init_db,
    get_oldest,
    delete_by_id,      # –∏–º–ø–æ—Ä—Ç –æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –±—É–¥—É—â–µ–µ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)
    find_similar_ids,
    bulk_delete,
)

# -------------------- ENV --------------------
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
CHANNEL_ID = os.getenv("CHANNEL_ID", "").strip()  # @channelusername –∏–ª–∏ -100...
ADMINS_RAW = os.getenv("ADMINS", "").strip()      # —Å–ø–∏—Å–æ–∫ id —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
TZ = os.getenv("TZ", "Europe/Moscow").strip()

# –í—Ä–µ–º—è –ø–æ—Å—Ç–∏–Ω–≥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî 12:00, 16:00, 20:00
TIMES = os.getenv("SCHEDULE_TIMES", "12,16,20")
# –ó–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø—Ä–∏—Å–ª–∞—Ç—å –ø—Ä–µ–≤—å—é –∞–¥–º–∏–Ω—É
PREVIEW_MINUTES = int(os.getenv("PREVIEW_MINUTES", "45"))

# -------------------- LOG --------------------
logging.basicConfig(level=logging.INFO, format="%(levelname)s | %(name)s : %(message)s")
log = logging.getLogger("scheduler")

# -------------------- UTILS --------------------
def _parse_times(times: str) -> list[int]:
    out = []
    for t in (times or "").split(","):
        t = t.strip()
        if not t:
            continue
        try:
            hour = int(t)
            if 0 <= hour <= 23:
                out.append(hour)
        except ValueError:
            pass
    return sorted(set(out)) or [12, 16, 20]

def _parse_admins(raw: str) -> list[int]:
    ids = []
    for part in (raw or "").replace(" ", "").split(","):
        if not part:
            continue
        if part.lstrip("-").isdigit():
            try:
                ids.append(int(part))
            except ValueError:
                pass
    return ids

def _now_tz(tz: str) -> datetime:
    return datetime.now(ZoneInfo(tz))

def _next_time(now: datetime, hours: list[int]) -> datetime:
    """–ë–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —á–∞—Å–æ–≤ (–º–∏–Ω—É—Ç—ã=00)."""
    candidates = []
    for h in hours:
        cand = now.replace(hour=h, minute=0, second=0, microsecond=0)
        if cand <= now:
            cand += timedelta(days=1)
        candidates.append(cand)
    return min(candidates)

def _escape(text: str) -> str:
    return html_escape(text or "")

def _channel_id_value() -> int | str:
    cid = CHANNEL_ID
    if cid.lstrip("-").isdigit():
        return int(cid)
    return cid  # –Ω–∞–ø—Ä–∏–º–µ—Ä "@layoutplace"

HOURS = _parse_times(TIMES)
ADMINS = _parse_admins(ADMINS_RAW)
CHANNEL = _channel_id_value()

# -------------------- CORE --------------------
async def send_preview_to_admins(bot: Bot, when_post: datetime, text: str):
    """–í—Å–µ–≥–¥–∞ —à–ª—ë–º –ø—Ä–µ–≤—å—é —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫—É –∞–¥–º–∏–Ω–∞–º (—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ)."""
    if not ADMINS:
        log.warning("ADMINS –ø—É—Å—Ç ‚Äî –Ω–µ–∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–µ–≤—å—é.")
        return
    caption = (
        f"üïí –ü–†–ï–í–¨–Æ –ø–æ—Å—Ç–∞ –Ω–∞ {when_post.strftime('%Y-%m-%d %H:%M')} ({TZ})\n\n"
        f"{_escape(text)}"
    )
    for uid in ADMINS:
        try:
            await bot.send_message(uid, caption)
        except TelegramBadRequest:
            # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –µ—â—ë —Ä–∞–∑ plain
            await bot.send_message(uid, caption)

async def send_to_channel(bot: Bot, text: str):
    """–ü–æ—Å—Ç–∏–Ω–≥ –≤ –∫–∞–Ω–∞–ª: –ø—ã—Ç–∞–µ–º—Å—è –∫–∞–∫ HTML, –ø—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º."""
    try:
        await bot.send_message(CHANNEL, text, parse_mode=ParseMode.HTML)
    except TelegramBadRequest:
        safe = _escape(text)
        await bot.send_message(CHANNEL, safe)

async def do_post(bot: Bot):
    """–ë–µ—Ä—ë–º —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –ø–æ—Å—Ç–∏–º –∏ —É–¥–∞–ª—è–µ–º –ø–æ—Ö–æ–∂–∏–µ."""
    row = get_oldest()
    if not row:
        log.info("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ ‚Äî –ø–æ—Å—Ç–∏—Ç—å –Ω–µ—á–µ–≥–æ.")
        return

    ad_id = row["id"]
    text = row["text"]

    await send_to_channel(bot, text)

    # –£–¥–∞–ª—è–µ–º —Å–∞–º –ø–æ—Å—Ç –∏ –ø–æ—Ö–æ–∂–∏–µ
    ids = find_similar_ids(text)
    if ad_id not in ids:
        ids.append(ad_id)
    deleted = bulk_delete(ids)
    log.info("–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ %s –ø–æ—Ö–æ–∂–∏—Ö (ids=%s)", deleted, ids)

async def run_scheduler():
    if not BOT_TOKEN or not CHANNEL_ID:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã BOT_TOKEN/CHANNEL_ID")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î (—Å–æ–∑–¥–∞—Å—Ç —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)
    init_db()

    bot = Bot(
        token=BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    )

    log.info(
        "Scheduler  TZ=%s, times=%s, preview_before=%s min",
        TZ, ",".join(map(str, HOURS)), PREVIEW_MINUTES
    )

    last_preview_for: datetime | None = None
    last_post_for: datetime | None = None

    while True:
        now = _now_tz(TZ)
        post_at = _next_time(now, HOURS)
        preview_at = post_at - timedelta(minutes=PREVIEW_MINUTES)

        # –ø—Ä–µ–≤—å—é (–≤—Å–µ–≥–¥–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º)
        if (last_preview_for != post_at) and (now >= preview_at) and (now < post_at):
            row = get_oldest()
            preview_text = row["text"] if row else "‚õî –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞"
            await send_preview_to_admins(bot, post_at, preview_text)
            last_preview_for = post_at
            log.info("–ü—Ä–µ–≤—å—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç –≤ %s", post_at)

        # –ø—É–±–ª–∏–∫–∞—Ü–∏—è
        if (last_post_for != post_at) and (now >= post_at):
            await do_post(bot)
            last_post_for = post_at
            # –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –¥—ë—Ä–≥–∞—Ç—å —Ü–∏–∫–ª —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            await asyncio.sleep(2)

        # –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –ª–æ–≥ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        if last_preview_for is None and last_post_for is None:
            delta_h = (preview_at - now).total_seconds() / 3600
            log.info(
                "–°–ª–µ–¥—É—é—â–∏–π –ü–†–ï–í–¨–Æ —á–µ—Ä–µ–∑ %.2f —á–∞—Å–æ–≤ (%s)",
                delta_h, preview_at.strftime("%Y-%m-%d %H:%M:%S %Z")
            )

        await asyncio.sleep(10)

def main():
    asyncio.run(run_scheduler())

if __name__ == "__main__":
    main()
