# scheduler.py
import os
import asyncio
import logging
from datetime import datetime, timedelta, time as dtime
from zoneinfo import ZoneInfo
from typing import List
import json

from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramUnauthorizedError, TelegramBadRequest

# –∫–æ–Ω—Ñ–∏–≥ (—Ç–æ–∫–µ–Ω / –∫–∞–Ω–∞–ª / TZ / –∞–¥–º–∏–Ω—ã)
from config import TOKEN as BOT_TOKEN, CHANNEL_ID, TZ as TZ_NAME, ADMINS

# —Ñ—É–Ω–∫—Ü–∏–∏ –ë–î (–æ—á–µ—Ä–µ–¥—å –∫–æ–ø–∏–π)
from storage.db import (
    init_db,
    queue_next_pending,   # –≤–∑—è—Ç—å —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å –≤ —Å—Ç–∞—Ç—É—Å–µ pending/previewed
    queue_mark_status,    # –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å: previewed/posted/error
    queue_count_pending,  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ pending
)

# ---------------- –õ–û–ì–ò ----------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(name)s | %(message)s")
log = logging.getLogger("scheduler")

# ---------------- –†–ê–°–ü–ò–°–ê–ù–ò–ï ----------------
TIMES_RAW = os.getenv("TIMES", "12:00,16:00,20:00")           # —Å–ª–æ—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–ª–æ–∫–∞–ª—å–Ω–æ –≤ TZ_NAME)
PREVIEW_BEFORE_MIN = int(os.getenv("PREVIEW_BEFORE_MIN", "45"))

tz = ZoneInfo(TZ_NAME)

def _parse_times(s: str) -> List[dtime]:
    out: List[dtime] = []
    for token in s.split(","):
        token = token.strip()
        if not token:
            continue
        h, m = token.split(":")
        out.append(dtime(hour=int(h), minute=int(m)))
    return out or [dtime(12, 0), dtime(16, 0), dtime(20, 0)]

TIMES = _parse_times(TIMES_RAW)

def _now() -> datetime:
    return datetime.now(tz)

def _next_slot(now: datetime) -> datetime:
    today = [datetime.combine(now.date(), t, tzinfo=tz) for t in TIMES]
    future = [dt for dt in today if dt > now]
    if future:
        return future[0]
    tomorrow = now.date() + timedelta(days=1)
    return datetime.combine(tomorrow, TIMES[0], tzinfo=tz)

# ---------------- –£–¢–ò–õ–ò–¢–´ ----------------
async def _notify_admins(bot: Bot, text: str):
    for aid in ADMINS:
        try:
            await bot.send_message(aid, text, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
        except TelegramUnauthorizedError:
            log.warning("–ê–¥–º–∏–Ω %s –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (Unauthorized). –ù–∞–∂–º–∏ /start –±–æ—Ç—É –≤ –õ–°.", aid)
        except Exception as e:
            log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É %s: %s", aid, e)

def unify_caption(text: str | None) -> str:
    """–ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –∫ –æ–±—â–µ–º—É —Ñ–æ—Ä–º–∞—Ç—É (–∫–∞–∫ –≤ main.py)."""
    text = (text or "").strip()
    text = text.replace("–¶–µ–Ω–∞ -", "–¶–µ–Ω–∞ ‚Äî")
    while "  " in text:
        text = text.replace("  ", " ")
    lines = [ln.strip() for ln in text.splitlines() if ln.strip()]
    text = "\n".join(lines)
    if "layoutplacebuy" not in text.lower():
        text += "\n\n@layoutplacebuy"
    return text

async def copy_and_delete(
    bot: Bot,
    source_chat_id: int | str,
    message_ids: List[int],
    target: int | str,
    caption_override: str | None,
):
    """
    –ö–æ–ø–∏—Ä—É–µ–º –ø–æ—Å—Ç/–∞–ª—å–±–æ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∞ (copy_message).
    –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ç–∞–≤–∏–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å—å.
    –ü–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—ã.
    """
    new_caption = unify_caption(caption_override)
    for idx, mid in enumerate(message_ids):
        if idx == 0 and new_caption:
            await bot.copy_message(
                chat_id=target,
                from_chat_id=source_chat_id,
                message_id=mid,
                caption=new_caption,
                parse_mode=ParseMode.HTML,
            )
        else:
            await bot.copy_message(
                chat_id=target,
                from_chat_id=source_chat_id,
                message_id=mid,
            )

    # —É–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ delete –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ)
    for mid in message_ids:
        try:
            await bot.delete_message(chat_id=source_chat_id, message_id=mid)
        except TelegramBadRequest:
            # –Ω–µ—Ç –ø—Ä–∞–≤ / —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ / —É–∂–µ —É–¥–∞–ª–µ–Ω–æ ‚Äî –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            pass
        except Exception as e:
            log.debug("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ %s/%s: %s", source_chat_id, mid, e)

# ---------------- –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ ----------------
async def run_scheduler():
    props = DefaultBotProperties(parse_mode=ParseMode.HTML)
    bot = Bot(BOT_TOKEN, default=props)

    await _notify_admins(
        bot,
        f"üïí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.\n–°–ª–æ—Ç—ã: <code>{TIMES_RAW}</code>\n"
        f"–ü—Ä–µ–≤—å—é: <b>{PREVIEW_BEFORE_MIN}</b> –º–∏–Ω.\n–í –æ—á–µ—Ä–µ–¥–∏: <b>{queue_count_pending()}</b>",
    )

    while True:
        now = _now()
        slot = _next_slot(now)
        preview_at = slot - timedelta(minutes=PREVIEW_BEFORE_MIN)
        # –ª–æ–≥–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
        log.info("–°–ª–µ–¥—É—é—â–∏–π —Å–ª–æ—Ç –ø–æ—Å—Ç–∏–Ω–≥–∞: %s (%s). –ü—Ä–µ–≤—å—é –≤: %s",
                 slot.strftime("%Y-%m-%d %H:%M"), TZ_NAME, preview_at.strftime("%Y-%m-%d %H:%M"))

        # ---- –¥–æ–∂–¥–∞—Ç—å—Å—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–≤—å—é ----
        delay_preview = max(0.0, (preview_at - _now()).total_seconds())
        await asyncio.sleep(delay_preview)

        # –ø—Ä–µ–≤—å—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—á–µ—Ä–µ–¥—å
        row = queue_next_pending()
        if row:
            caption = row.get("caption_override") or ""
            await _notify_admins(
                bot,
                "üëÄ <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä</b>\n"
                f"üïí –ü—É–±–ª–∏–∫–∞—Ü–∏—è: <code>{slot.strftime('%Y-%m-%d %H:%M')}</code> ({TZ_NAME})\n"
                f"–ò—Å—Ç–æ—á–Ω–∏–∫: <code>{row['source_chat_id']}</code>\n"
                f"Messages: <code>{row['message_ids']}</code>\n\n"
                f"{caption}"
            )
            queue_mark_status(row["id"], "previewed")
        else:
            await _notify_admins(bot, "‚ÑπÔ∏è –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ ‚Äî –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ.")

        # ---- –¥–æ–∂–¥–∞—Ç—å—Å—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å—Ç–∞ ----
        delay_post = max(0.0, (slot - _now()).total_seconds())
        await asyncio.sleep(delay_post)

        row = queue_next_pending()
        if not row:
            log.info("–°–ª–æ—Ç %s: –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.", slot.strftime("%H:%M"))
            continue

        # message_ids ‚Äî JSON-—Å—Ç—Ä–æ–∫–∞
        try:
            message_ids = [int(x) for x in json.loads(row["message_ids"])]
        except Exception:
            # —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏
            message_ids = [int(x) for x in eval(row["message_ids"])]

        try:
            await copy_and_delete(
                bot=bot,
                source_chat_id=row["source_chat_id"],
                message_ids=message_ids,
                target=CHANNEL_ID,
                caption_override=row.get("caption_override"),
            )
            queue_mark_status(row["id"], "posted")
            await _notify_admins(
                bot, f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∏–∑ <code>{row['source_chat_id']}</code> ‚Äî ids={message_ids}"
            )
            log.info("‚úÖ Posted task #%s", row["id"])
        except Exception as e:
            queue_mark_status(row["id"], "error")
            await _notify_admins(bot, f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ id={row['id']}: <code>{e}</code>")
            log.exception("–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ task #%s: %s", row["id"], e)

# ---------------- ENTRY ----------------
async def main():
    init_db()
    log.info("Scheduler TZ=%s, times=%s, preview_before=%s min", TZ_NAME, TIMES_RAW, PREVIEW_BEFORE_MIN)
    await run_scheduler()

if __name__ == "__main__":
    asyncio.run(main())
