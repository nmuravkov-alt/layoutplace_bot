# scheduler.py
# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: 3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç /post_oldest –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞

import asyncio
import logging
import os
from datetime import datetime, time, timedelta
from typing import List

import pytz
from aiogram import Bot
from aiogram.enums import ParseMode

# –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Ö—Ä–∞–Ω–∏–º ¬´–∫–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç¬ª –≤ –º–µ—Ç–∞
try:
    from storage.meta import set_meta  # type: ignore
except Exception:
    def set_meta(*_args, **_kwargs):
        pass


# ------------ –ö–æ–Ω—Ñ–∏–≥ –∏–∑ ENV ------------

BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
ADMINS_RAW = os.getenv("ADMINS", "").strip()
TZ_NAME = os.getenv("TZ", "Europe/Moscow").strip()
SCHEDULE_TIMES = os.getenv("SCHEDULE_TIMES", "12:00,16:00,20:00").strip()

# –±–µ—Ä—ë–º –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π/—Ç—Ä–∏–≥–≥–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
ADMIN_ID = None
for chunk in ADMINS_RAW.split(","):
    s = chunk.strip()
    if s.isdigit():
        ADMIN_ID = int(s)
        break


# ------------ –í—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ ------------

def parse_times(spec: str) -> List[time]:
    """–ü–∞—Ä—Å–∏–º 'HH:MM,HH:MM,...' ‚Üí [time, ...]"""
    out: List[time] = []
    for part in spec.split(","):
        p = part.strip()
        if not p:
            continue
        try:
            hh, mm = p.split(":")
            out.append(time(int(hh), int(mm)))
        except Exception:
            logging.warning(f"Skip bad time '{p}' in SCHEDULE_TIMES")
    if not out:
        out = [time(12, 0), time(16, 0), time(20, 0)]
    return sorted(out)


def next_run_dt(now: datetime, times: List[time], tz) -> datetime:
    """–ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ c —É—á—ë—Ç–æ–º TZ."""
    today = now.date()
    # —Å–ø–µ—Ä–≤–∞ —Å–µ–≥–æ–¥–Ω—è
    for t in times:
        candidate = tz.localize(datetime.combine(today, t))
        if candidate > now:
            return candidate
    # –∏–Ω–∞—á–µ –∑–∞–≤—Ç—Ä–∞ –ø–µ—Ä–≤–æ–µ –≤—Ä–µ–º—è
    tomorrow = today + timedelta(days=1)
    return tz.localize(datetime.combine(tomorrow, times[0]))


async def notify_admin(bot: Bot, text: str):
    """–¢–∏—Ö–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)."""
    if not (ADMIN_ID and isinstance(ADMIN_ID, int)):
        return
    try:
        await bot.send_message(ADMIN_ID, text, disable_web_page_preview=True, parse_mode=ParseMode.HTML)
    except Exception as e:
        logging.warning(f"notify_admin failed: {e}")


async def trigger_post(bot: Bot):
    """
    –¢—Ä–∏–≥–≥–µ—Ä–∏–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç:
    –ø–æ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É –∫–æ–º–∞–Ω–¥—É /post_oldest ‚Äî –¥–∞–ª—å—à–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ main.py –≤—Å—ë —Å–¥–µ–ª–∞–µ—Ç.
    """
    if not (ADMIN_ID and isinstance(ADMIN_ID, int)):
        logging.error("ADMIN_ID is not set; cannot trigger /post_oldest")
        return
    try:
        await bot.send_message(ADMIN_ID, "/post_oldest")
    except Exception as e:
        logging.exception(f"Failed to trigger /post_oldest: {e}")


# ------------ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ------------

async def run_scheduler():
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN is empty")
    if ADMIN_ID is None:
        logging.warning("ADMINS is empty or invalid ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ç—Ä–∏–≥–≥–µ—Ä /post_oldest –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")

    tz = pytz.timezone(TZ_NAME or "Europe/Moscow")
    times = parse_times(SCHEDULE_TIMES)

    logging.info(f"Scheduler TZ={tz.zone}, times={','.join(t.strftime('%H:%M') for t in times)}")
    bot = Bot(BOT_TOKEN, parse_mode=ParseMode.HTML)

    try:
        while True:
            now = datetime.now(tz)
            nxt = next_run_dt(now, times, tz)

            # —Å–æ—Ö—Ä–∞–Ω–∏–º –≤ –º–µ—Ç–∞ –∏ —É–≤–µ–¥–æ–º–∏–º
            try:
                set_meta("next_post_at", nxt.isoformat())
            except Exception:
                pass

            hours_left = (nxt - now).total_seconds() / 3600.0
            logging.info(f"–°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ {hours_left:.2f} —á–∞—Å–æ–≤ ({nxt.strftime('%Y-%m-%d %H:%M:%S %Z')})")
            await notify_admin(
                bot,
                f"üóì –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç –≤ <b>{nxt.strftime('%Y-%m-%d %H:%M:%S %Z')}</b>\n"
                f"(—á–µ—Ä–µ–∑ ~{hours_left:.2f} —á)"
            )

            # —Å–ø–∏–º –¥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            await asyncio.sleep(max(1, int((nxt - datetime.now(tz)).total_seconds())))

            # –ø–æ–ø—ã—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            try:
                await trigger_post(bot)
                await notify_admin(bot, "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (/post_oldest).")
            except Exception as e:
                logging.exception(f"Post failed: {e}")
                await notify_admin(bot, f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: <code>{e}</code>")

            # –º–∞–ª–µ–Ω—å–∫–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ —Å—Ö–ª–æ–ø–Ω—É—Ç—å—Å—è –ø—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –≤—Ä–µ–º–µ–Ω–∞—Ö
            await asyncio.sleep(2)
    finally:
        await bot.session.close()


def main():
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    )
    asyncio.run(run_scheduler())


if __name__ == "__main__":
    main()
