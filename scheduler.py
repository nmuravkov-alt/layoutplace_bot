# scheduler.py
import asyncio
import logging
import os
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

from aiogram import Bot
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

# --- –ë–î-—É—Ç–∏–ª–∏—Ç—ã ---
from storage.db import (
    init_db,
    get_oldest,
    delete_by_id,
    find_similar_ids,
    bulk_delete,
)

# ----------------- –ö–æ–Ω—Ñ–∏–≥ -----------------
BOT_TOKEN   = os.getenv("BOT_TOKEN", "").strip()
CHANNEL_ID  = os.getenv("CHANNEL_ID", "").strip()      # @username –∏–ª–∏ -100...
ADMINS_RAW  = os.getenv("ADMINS", "").strip()          # "123, 456 789"
TZ_NAME     = os.getenv("TZ", "Europe/Moscow").strip()
POST_TIMES  = os.getenv("POST_TIMES", "12,16,20").strip()  # —á–∞—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é

def _parse_admins(raw: str) -> list[int]:
    parts = [p.strip() for p in raw.replace(",", " ").split()]
    out: list[int] = []
    for p in parts:
        try:
            out.append(int(p))
        except ValueError:
            pass
    return out

ADMINS: list[int] = _parse_admins(ADMINS_RAW)
TZ = ZoneInfo(TZ_NAME)

def _parse_hours(raw: str) -> list[int]:
    hours: list[int] = []
    for p in raw.replace("/", ",").split(","):
        p = p.strip()
        if not p:
            continue
        try:
            h = int(p)
            if 0 <= h <= 23:
                hours.append(h)
        except ValueError:
            continue
    hours = sorted(set(hours))
    return hours or [12, 16, 20]

HOURS = _parse_hours(POST_TIMES)

# ----------------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ -----------------
logging.basicConfig(level=logging.INFO, format="%(levelname)s | %(name)s | %(message)s")
log = logging.getLogger("scheduler")

# ----------------- –•–µ–ª–ø–µ—Ä—ã -----------------
def now() -> datetime:
    return datetime.now(TZ)

def human_dt(dt: datetime) -> str:
    return dt.strftime("%Y-%m-%d %H:%M:%S %Z")

def next_run_after(dt: datetime) -> datetime:
    """–°–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ ‚â• dt –ø–æ —Å–ø–∏—Å–∫—É —á–∞—Å–æ–≤ HOURS."""
    base = dt.replace(minute=0, second=0, microsecond=0)
    today_candidates = [base.replace(hour=h) for h in HOURS]
    for cand in today_candidates:
        if cand >= dt:
            return cand
    # –∏–Ω–∞—á–µ ‚Äî –∑–∞–≤—Ç—Ä–∞ –≤ –ø–µ—Ä–≤—ã–π —á–∞—Å –∏–∑ —Å–ø–∏—Å–∫–∞
    return (base + timedelta(days=1)).replace(hour=HOURS[0])

async def notify_admins(bot: Bot, text: str) -> None:
    if not ADMINS:
        return
    for uid in ADMINS:
        try:
            await bot.send_message(uid, text, disable_web_page_preview=True)
        except Exception as e:
            log.warning(f"notify_admins fail for {uid}: {e}")

async def send_to_channel(bot: Bot, text: str) -> None:
    await bot.send_message(chat_id=CHANNEL_ID, text=text, disable_web_page_preview=True)

# ----------------- –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ -----------------
async def do_one_post(bot: Bot) -> None:
    """–ë–µ—Ä—ë–º —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∞–¥–º–∏–Ω–∞–º, –ø–æ—Å—Ç–∏–º, —á–∏—Å—Ç–∏–º –ø–æ—Ö–æ–∂–∏–µ, —à–ª—ë–º –æ—Ç—á—ë—Ç."""
    await init_db()

    row = await get_oldest()
    if not row:
        await notify_admins(bot, "‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞—è ‚Äî –ø–æ—Å—Ç–∏—Ç—å –Ω–µ—á–µ–≥–æ.")
        log.info("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞—è.")
        return

    ad_id = row["id"] if isinstance(row, dict) else row[0]
    ad_text = row["text"] if isinstance(row, dict) else row[1]

    # –ü—Ä–µ–≤—å—é –∞–¥–º–∏–Ω–∞–º
    preview = (
        "üìù <b>–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π –ø–æ—Å—Ç</b>\n\n"
        f"{ad_text}\n\n"
        f"ID –≤ –æ—á–µ—Ä–µ–¥–∏: <code>{ad_id}</code>"
    )
    await notify_admins(bot, preview)

    # –ü–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª
    await send_to_channel(bot, ad_text)

    # –ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–∏—Ö
    similar_ids = await find_similar_ids(ad_id)  # —Å–ø–∏—Å–æ–∫ int (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç)
    removed = 0
    if similar_ids:
        ids = set(similar_ids)
        ids.add(ad_id)
        removed = await bulk_delete(list(ids))
    else:
        await delete_by_id(ad_id)
        removed = 1

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    report = (
        "‚úÖ <b>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ</b>\n"
        f"–£–¥–∞–ª–µ–Ω–æ –ø–æ—Ö–æ–∂–∏—Ö (–≤–∫–ª—é—á–∞—è –∏—Å—Ö–æ–¥–Ω—ã–π): <b>{removed}</b>"
    )
    await notify_admins(bot, report)
    log.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ {removed} –∑–∞–ø–∏—Å–µ–π.")

async def run_scheduler() -> None:
    bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    log.info(f"Scheduler TZ={TZ_NAME}, times={','.join(map(str, HOURS))}")

    # –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    while True:
        now_dt = now()
        run_dt = next_run_after(now_dt)
        wait_sec = max((run_dt - now_dt).total_seconds(), 0)
        log.info(f"–°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ {wait_sec/3600:.2f} —á–∞—Å–æ–≤ ({human_dt(run_dt)})")
        try:
            await asyncio.sleep(wait_sec)
            await do_one_post(bot)
        except Exception as e:
            log.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}")
            # —á—Ç–æ–±—ã –Ω–µ —É–ª–µ—Ç–µ—Ç—å –≤ –±—ã—Å—Ç—Ä—ã–π —Ü–∏–∫–ª –ø—Ä–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –æ—à–∏–±–∫–µ
            await asyncio.sleep(10)

async def main():
    await run_scheduler()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        log.info("Scheduler stopped")
