# scheduler.py
import asyncio
import logging
from datetime import datetime, timedelta, time as dtime
from zoneinfo import ZoneInfo

from aiogram import Bot
from aiogram.enums import ParseMode

from config import TOKEN as BOT_TOKEN, TZ as TZ_NAME, ADMINS, CHANNEL_ID

logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("scheduler")

TZ = ZoneInfo(TZ_NAME or "Europe/Moscow")

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∏–Ω–≥–∞: 12:00 / 16:00 / 20:00 (–ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è TZ)
SLOTS = [dtime(12, 0), dtime(16, 0), dtime(20, 0)]
PREVIEW_BEFORE_MIN = 45


def _now() -> datetime:
    return datetime.now(tz=TZ)


def _next_slot(now: datetime) -> datetime:
    """–í–µ—Ä–Ω—ë—Ç –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞."""
    today = now.date()
    candidates = [datetime.combine(today, t, tzinfo=TZ) for t in SLOTS]
    for dt in candidates:
        if dt > now:
            return dt
    # –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ—à–ª–∏ ‚Äî –ø–µ—Ä–≤—ã–π —Å–ª–æ—Ç –∑–∞–≤—Ç—Ä–∞
    tomorrow = today + timedelta(days=1)
    return datetime.combine(tomorrow, SLOTS[0], tzinfo=TZ)


async def _notify_admins(bot: Bot, text: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É–∂–µ–±–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º –≤ –õ–°.
    –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–¥–º–∏–Ω –Ω–∞–∂–∞–ª /start –±–æ—Ç—É (–∏–Ω–∞—á–µ Unauthorized)."""
    for aid in ADMINS:
        try:
            await bot.send_message(
                aid,
                text,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True,
            )
        except Exception as e:
            # –û–±—ã—á–Ω–æ —ç—Ç–æ TelegramUnauthorizedError: –∞–¥–º–∏–Ω –Ω–µ –Ω–∞–∂–∞–ª /start
            log.warning("–ê–¥–º–∏–Ω %s –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (%s). –ù–∞–∂–º–∏ /start –±–æ—Ç—É –≤ –õ–°.", aid, type(e).__name__)


async def run_scheduler():
    bot = Bot(
        token=BOT_TOKEN,
        default=None,  # –Ω–∏–∫–∞–∫–∏—Ö —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∑–¥–µ—Å—å
    )

    log.info(
        "Scheduler  TZ=%s, times=%s, preview_before=%d min",
        TZ.key,
        ",".join(t.strftime("%H:%M") for t in SLOTS),
        PREVIEW_BEFORE_MIN,
    )

    while True:
        now = _now()
        slot = _next_slot(now)
        preview_at = slot - timedelta(minutes=PREVIEW_BEFORE_MIN)

        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º, —á—Ç–æ –∑–∞–ø—É—â–µ–Ω—ã –∏ –∫–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å–ª–æ—Ç/–ø—Ä–µ–≤—å—é
        await _notify_admins(
            bot,
            (
                f"‚è∞ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞ —Å–≤—è–∑–∏</b>\n"
                f"–ö–∞–Ω–∞–ª: <code>{CHANNEL_ID}</code>\n"
                f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <code>{TZ.key}</code>\n\n"
                f"–°–ª–µ–¥—É—é—â–∏–π —Å–ª–æ—Ç –ø–æ—Å—Ç–∏–Ω–≥–∞: <b>{slot:%Y-%m-%d %H:%M}</b>\n"
                f"–ü—Ä–µ–≤—å—é –≤: <b>{preview_at:%Y-%m-%d %H:%M}</b>"
            ),
        )

        # –ñ–¥—ë–º –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–≤—å—é
        now = _now()
        if preview_at > now:
            sleep_sec = (preview_at - now).total_seconds()
            log.info("–ñ–¥—ë–º –ø—Ä–µ–≤—å—é %.2f —Å–µ–∫—É–Ω–¥ (–¥–æ %s)", sleep_sec, preview_at)
            await asyncio.sleep(sleep_sec)

        # –ü—Ä–µ–≤—å—é –∞–¥–º–∏–Ω–∞–º (—Å–∞–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –±–æ—Ç –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ‚Äî
        # —Ç—É—Ç –ª–∏—à—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —á—Ç–æ —á–µ—Ä–µ–∑ 45 –º–∏–Ω—É—Ç –∑–∞–ø–æ—Å—Ç–∏–º)
        await _notify_admins(
            bot,
            (
                "üîî <b>–ü—Ä–µ–≤—å—é</b>\n"
                f"–î–æ –ø–æ—Å—Ç–∏–Ω–≥–∞ –æ—Å—Ç–∞–ª–æ—Å—å <b>{PREVIEW_BEFORE_MIN} –º–∏–Ω—É—Ç</b>."
            ),
        )

        # –ñ–¥—ë–º –¥–æ —Å–∞–º–æ–≥–æ —Å–ª–æ—Ç–∞
        now = _now()
        if slot > now:
            sleep_sec = (slot - now).total_seconds()
            log.info("–ñ–¥—ë–º —Å–ª–æ—Ç –ø–æ—Å—Ç–∏–Ω–≥–∞ %.2f —Å–µ–∫—É–Ω–¥ (–¥–æ %s)", sleep_sec, slot)
            await asyncio.sleep(sleep_sec)

        # –ù–∞ —Å–∞–º–æ–º —Å–ª–æ—Ç–µ –º—ã –Ω–µ –ø—É–±–ª–∏–∫—É–µ–º —Å–∞–º–∏ ‚Äî –ø—É–±–ª–∏–∫–∞—Ü–∏—é –¥–µ–ª–∞–µ—Ç –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
        # (–æ–Ω –±–µ—Ä—ë—Ç —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –ø–æ—Å—Ç/—Ä–µ–ø–æ—Å—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏).
        # –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –ø–∏–Ω–≥—É–µ–º –∞–¥–º–∏–Ω–æ–≤, —á—Ç–æ ¬´–ø–æ—Ä–∞¬ª.
        await _notify_admins(
            bot,
            "üöÄ –í—Ä–µ–º—è –ø–æ—Å—Ç–∏–Ω–≥–∞. –ë–æ—Ç –æ–ø—É–±–ª–∏–∫—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –æ—á–µ—Ä–µ–¥–∏.",
        )

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–∏—Å–∫—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ—Ç–∞ (—Ü–∏–∫–ª while True)
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–ª–æ—Ç–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏:
        await asyncio.sleep(1)


async def main():
    try:
        await run_scheduler()
    except asyncio.CancelledError:
        pass


if __name__ == "__main__":
    asyncio.run(main())
