import asyncio
import logging
import os
from datetime import datetime, timedelta
import pytz

from aiogram import Bot
from aiogram.enums import ParseMode

from storage.db import init_db, get_oldest, delete_by_id, find_similar_ids, bulk_delete

# ------------------ –ö–æ–Ω—Ñ–∏–≥ ------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
ADMINS = os.getenv("ADMINS", "").split(",")
TZ = os.getenv("TZ", "Europe/Moscow")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ‚Äî 3 –ø–æ—Å—Ç–∞ –≤ –¥–µ–Ω—å
POST_TIMES = ["12:00", "16:00", "20:00"]

logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN, default=ParseMode.HTML)
tz = pytz.timezone(TZ)


# ------------------ –§—É–Ω–∫—Ü–∏–∏ ------------------
async def send_preview(ad):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–≤—å—é –∞–¥–º–∏–Ω–∞–º –ø–µ—Ä–µ–¥ –ø–æ—Å—Ç–æ–º"""
    preview_text = f"üïí –ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –∞–≤—Ç–æ–ø–æ—Å—Ç:\n\n{ad['text']}"
    for admin in ADMINS:
        if admin.strip():
            try:
                await bot.send_message(int(admin.strip()), preview_text)
            except Exception as e:
                log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–≤—å—é –∞–¥–º–∏–Ω—É {admin}: {e}")


async def post_to_channel():
    """–ü–æ—Å—Ç–∏—Ç —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ—Ç –ø–æ—Ö–æ–∂–∏–µ"""
    ad = get_oldest()
    if not ad:
        log.info("–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        return

    try:
        await bot.send_message(CHANNEL_ID, ad["text"])
        log.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ID={ad['id']}")

        # –£–¥–∞–ª—è–µ–º –ø–æ—Ö–æ–∂–∏–µ
        similar_ids = find_similar_ids(ad["text"])
        bulk_delete(similar_ids)
        delete_by_id(ad["id"])
        log.info(f"–£–¥–∞–ª–µ–Ω–æ {len(similar_ids)} –ø–æ—Ö–æ–∂–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        for admin in ADMINS:
            if admin.strip():
                try:
                    await bot.send_message(int(admin.strip()), f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ID={ad['id']}")
                except Exception as e:
                    log.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞ {admin}: {e}")
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–∏–Ω–≥–µ: {e}")


async def scheduler_loop():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    init_db()  # —Ç–µ–ø–µ—Ä—å –±–µ–∑ await, —Ç.–∫. —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è
    log.info(f"Scheduler TZ={TZ}, times={','.join(POST_TIMES)}")

    while True:
        now = datetime.now(tz)
        next_time = None

        for t in POST_TIMES:
            hour, minute = map(int, t.split(":"))
            candidate = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
            if candidate > now:
                next_time = candidate
                break

        if not next_time:
            next_time = (now + timedelta(days=1)).replace(hour=12, minute=0, second=0, microsecond=0)

        wait_seconds = (next_time - now).total_seconds()
        log.info(f"–°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ {wait_seconds/3600:.2f} —á–∞—Å–æ–≤ ({next_time.strftime('%Y-%m-%d %H:%M:%S %Z')})")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –ø–æ—Å—Ç–∞
        preview_delay = wait_seconds - 600
        if preview_delay > 0:
            await asyncio.sleep(preview_delay)
            ad = get_oldest()
            if ad:
                await send_preview(ad)

        # –ñ–¥—ë–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è 10 –º–∏–Ω—É—Ç
        await asyncio.sleep(max(0, wait_seconds - max(preview_delay, 0)))
        await post_to_channel()


async def main():
    await scheduler_loop()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        log.info("‚èπÔ∏è Scheduler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
