# scheduler.py
# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –ø—Ä–µ–≤—å—é –∞–¥–º–∏–Ω—É –∑–∞ N –º–∏–Ω—É—Ç –¥–æ –ø–æ—Å—Ç–∞ –∏ —Å–∞–º –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª.

import asyncio
import logging
import os
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from typing import List

from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from storage.db import (
    init_db,
    get_oldest,
    delete_by_id,
    find_similar_ids,
    bulk_delete,
)

# -------------------- –ö–æ–Ω—Ñ–∏–≥ --------------------

BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
CHANNEL_ID = os.getenv("CHANNEL_ID", "").strip()
ADMINS_RAW = os.getenv("ADMINS", "").strip()
TZ = os.getenv("TZ", "Europe/Moscow")

# –í—Ä–µ–º—è –ø–æ—Å—Ç–∏–Ω–≥–∞ –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é ‚Äî 12:00, 16:00, 20:00
TIMES_RAW = os.getenv("POST_TIMES", "12,16,20").strip()
# –ó–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–µ–ª–∞—Ç—å –ø—Ä–µ–≤—å—é –∞–¥–º–∏–Ω—É
PREVIEW_BEFORE_MIN = int(os.getenv("PREVIEW_BEFORE_MIN", "45"))

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

def _parse_admins(raw: str) -> List[int]:
    res: List[int] = []
    for part in raw.replace(";", ",").split(","):
        p = part.strip()
        if not p:
            continue
        try:
            res.append(int(p))
        except ValueError:
            pass
    return res

ADMINS: List[int] = _parse_admins(ADMINS_RAW)

try:
    tz = ZoneInfo(TZ)
except Exception:
    tz = ZoneInfo("UTC")

def _parse_times(raw: str) -> List[datetime.time]:
    times: List[datetime.time] = []
    for part in raw.split(","):
        p = part.strip()
        if not p:
            continue
        try:
            hh = int(p)
            mm = 0
            if ":" in p:
                hh, mm = map(int, p.split(":", 1))
            times.append(datetime.now(tz).replace(hour=hh, minute=mm, second=0, microsecond=0).time())
        except Exception:
            continue
    return times

POST_TIMES = _parse_times(TIMES_RAW)

logging.basicConfig(
    level=logging.INFO,
    format="%(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("scheduler")

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

# -------------------- –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ --------------------

def _today_at(t: datetime.time) -> datetime:
    now = datetime.now(tz)
    return now.replace(hour=t.hour, minute=t.minute, second=0, microsecond=0)

def _next_occurrence(target: datetime) -> datetime:
    """–ï—Å–ª–∏ —Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ ‚Äî –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ —Ç–æ –∂–µ –≤—Ä–µ–º—è."""
    now = datetime.now(tz)
    if target <= now:
        target = target + timedelta(days=1)
    return target

async def _send_preview(ad_id: int, text: str, when_post: datetime):
    """–ü—Ä–µ–≤—å—é —É—Ö–æ–¥–∏—Ç –¢–û–õ–¨–ö–û –≤ –ª–∏—á–∫—É –∞–¥–º–∏–Ω–∞–º."""
    if not ADMINS:
        log.info("Preview skipped: no ADMINS configured")
        return
    header = (
        f"üïí –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ (–ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ {when_post.strftime('%H:%M %d.%m')}, {TZ})\n"
        f"ID –≤ –æ—á–µ—Ä–µ–¥–∏: <code>{ad_id}</code>\n\n"
    )
    for admin_id in ADMINS:
        try:
            await bot.send_message(admin_id, header + text)
        except Exception as e:
            log.warning("Preview send failed to %s: %s", admin_id, e)

async def _do_post():
    """–ü–æ—Å—Ç–∏–Ω–≥ —Å–∞–º–æ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ + —á–∏—Å—Ç–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö."""
    oldest = get_oldest()
    if not oldest:
        log.info("–ü–æ—Å—Ç–∏–Ω–≥ –ø—Ä–æ–ø—É—â–µ–Ω: –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞")
        return
    ad_id, text = oldest
    await bot.send_message(CHANNEL_ID, text)

    similar = find_similar_ids(ad_id, threshold=0.88)
    removed = bulk_delete([ad_id] + similar)
    log.info("–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω %s, —É–¥–∞–ª–µ–Ω–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ %s (–≤–∫–ª—é—á–∞—è –ø–æ—Ö–æ–∂–∏–µ)", ad_id, removed)

async def run_scheduler():
    init_db()
    times_info = ",".join(t.strftime("%H:%M") for t in POST_TIMES)
    log.info("Scheduler  TZ=%s, times=%s, preview_before=%s min", TZ, times_info, PREVIEW_BEFORE_MIN)

    # –†–∞—Å—á—ë—Ç ‚Äú–æ–∫–Ω–∞‚Äù –¥–ª—è –ø—Ä–µ–≤—å—é
    preview_delta = timedelta(minutes=PREVIEW_BEFORE_MIN)

    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    while True:
        now = datetime.now(tz)

        # –±–ª–∏–∂–∞–π—à–∞—è —Ü–µ–ª—å —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –≤—Ä–µ–º—ë–Ω —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞
        next_posts: List[datetime] = [_next_occurrence(_today_at(t)) for t in POST_TIMES]
        next_post = min(next_posts)

        # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –ø—Ä–µ–≤—å—é
        preview_time = next_post - preview_delta
        if preview_time <= now < next_post:
            # –æ—Ç–ø—Ä–∞–≤–∏–º –ø—Ä–µ–≤—å—é –æ–¥–∏–Ω —Ä–∞–∑ –≤ —ç—Ç–æ–º –æ–∫–Ω–µ
            # –±–µ—Ä—ë–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è)
            oldest = get_oldest()
            if oldest:
                ad_id, text = oldest
                await _send_preview(ad_id, text, next_post)
                # –∂–¥—ë–º –¥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å—Ç–∞ (—á—Ç–æ–±—ã –Ω–µ —Å–ª–∞—Ç—å –ø—Ä–µ–≤—å—é –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ)
                sleep_sec = max(5, int((next_post - datetime.now(tz)).total_seconds()))
                log.info("–°–ª–µ–¥—É—é—â–∏–π –ü–û–°–¢ —á–µ—Ä–µ–∑ %.2f –º–∏–Ω—É—Ç (–≤ %s)", sleep_sec / 60, next_post.strftime("%H:%M %d.%m"))
                await asyncio.sleep(sleep_sec)
                # –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Å—Ç
                await _do_post()
            else:
                # –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –∂–¥—ë–º –¥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å—Ç–∞ –∏ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º
                sleep_sec = max(5, int((next_post - now).total_seconds()))
                log.info("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞. –ñ–¥—É %s —Å–µ–∫ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ—Ç–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞", sleep_sec)
                await asyncio.sleep(sleep_sec)
        else:
            # –Ω–∏ –ø—Ä–µ–≤—å—é, –Ω–∏ –ø–æ—Å—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–ø–∏–º –Ω–µ–º–Ω–æ–≥–æ
            # —á—Ç–æ–±—ã –Ω–µ –≥—Ä—É–∑–∏—Ç—å CPU, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ 30 —Å–µ–∫
            await asyncio.sleep(30)

# -------------------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ --------------------

async def main():
    try:
        await run_scheduler()
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
