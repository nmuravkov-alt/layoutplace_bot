# scheduler.py
import os
import asyncio
import logging
from datetime import datetime, timedelta, time as dtime
from zoneinfo import ZoneInfo
from html import escape as html_escape
import json
from typing import List

from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramUnauthorizedError, TelegramBadRequest
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from storage.db import (
    init_db,
    queue_next_pending,
    queue_mark_status,
    queue_count_pending,
)

# ----------------- –õ–æ–≥–∏ -----------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(name)s | %(message)s")
log = logging.getLogger("scheduler")

# ----------------- ENV -----------------
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
CHANNEL_ID = os.getenv("CHANNEL_ID", "").strip()  # @username –∏–ª–∏ -100...
ADMINS = [a.strip() for a in os.getenv("ADMINS", "").split(",") if a.strip()]
TZ_NAME = os.getenv("TZ", "Europe/Moscow")
TIMES_RAW = os.getenv("TIMES", "12:00,16:00,20:00")          # —Å–ª–æ—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
PREVIEW_BEFORE_MIN = int(os.getenv("PREVIEW_BEFORE_MIN", "45"))

tz = ZoneInfo(TZ_NAME)

# ----------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ -----------------
def _parse_times(s: str) -> List[dtime]:
    out: List[dtime] = []
    for token in s.split(","):
        token = token.strip()
        if not token:
            continue
        h, m = token.split(":")
        out.append(dtime(hour=int(h), minute=int(m)))
    return out or [dtime(12, 0), dtime(16, 0), dtime(20, 0)]

TIMES = _parse_times(TIMES_RAW)

def _now():
    return datetime.now(tz)

def _next_run(now: datetime) -> datetime:
    today_slots = [datetime.combine(now.date(), t, tzinfo=tz) for t in TIMES]
    future = [dt for dt in today_slots if dt > now]
    if future:
        return future[0]
    # –∏–Ω–∞—á–µ ‚Äî –ø–µ—Ä–≤—ã–π —Å–ª–æ—Ç –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
    tomorrow = now.date() + timedelta(days=1)
    return datetime.combine(tomorrow, TIMES[0], tzinfo=tz)

async def _notify_admins(bot: Bot, text: str):
    for aid in ADMINS:
        try:
            await bot.send_message(aid, text, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
        except TelegramUnauthorizedError:
            log.warning("–ê–¥–º–∏–Ω %s –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (Unauthorized). –ù–∞–∂–º–∏ /start –±–æ—Ç—É –≤ –õ–°.", aid)
        except Exception as e:
            log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É %s: %s", aid, e)

# ----------------- –§–æ—Ä–º–∞—Ç –ø–æ–¥–ø–∏—Å–∏ -----------------
def unify_caption(text: str | None) -> str:
    text = (text or "").strip()
    text = text.replace("–¶–µ–Ω–∞ -", "–¶–µ–Ω–∞ ‚Äî")
    # —á–∏—Å—Ç–∏–º –¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    parts = [ln.strip() for ln in text.splitlines() if ln.strip()]
    text = "\n".join(parts)
    # –¥–æ–±–∞–≤–∏–º –∫–æ–Ω—Ç–∞–∫—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if "layoutplacebuy" not in text.lower():
        text += "\n\n@layoutplacebuy"
    return text

# ----------------- –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ -----------------
async def copy_and_delete(bot: Bot, source_chat_id: int | str, message_ids: List[int], target: int | str, caption_override: str | None):
    """
    –ö–æ–ø–∏—Ä—É–µ–º –ø–æ—Å—Ç (–∏–ª–∏ –∞–ª—å–±–æ–º) copy_message'–∞–º–∏, —É –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ç–∞–≤–∏–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å—å.
    –ó–∞—Ç–µ–º –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—ã.
    """
    posted_ids: List[int] = []
    new_caption = unify_caption(caption_override)

    for idx, mid in enumerate(message_ids):
        if idx == 0 and new_caption:
            msg = await bot.copy_message(
                chat_id=target,
                from_chat_id=source_chat_id,
                message_id=mid,
                caption=new_caption,
                parse_mode=ParseMode.HTML
            )
        else:
            msg = await bot.copy_message(
                chat_id=target,
                from_chat_id=source_chat_id,
                message_id=mid
            )
        posted_ids.append(msg.message_id)

    # —É–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—ã (–µ—Å–ª–∏ —É –±–æ—Ç–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–∞–Ω–∞–ª–µ)
    for mid in message_ids:
        try:
            await bot.delete_message(chat_id=source_chat_id, message_id=mid)
        except TelegramBadRequest as e:
            # –Ω–µ—Ç –ø—Ä–∞–≤ / —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ / —É–∂–µ —É–¥–∞–ª–µ–Ω–æ ‚Äî –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            log.debug("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ %s/%s: %s", source_chat_id, mid, e)
        except Exception as e:
            log.debug("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ %s/%s: %s", source_chat_id, mid, e)

    return posted_ids

# ----------------- –ü—Ä–µ–≤—å—é -----------------
def _preview_keyboard() -> InlineKeyboardMarkup:
    # –ö–Ω–æ–ø–∫–∞ ¬´–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å¬ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ main.py (callback_data="postnow")
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="postnow")]
    ])

async def send_preview(bot: Bot, row: dict, when_post: datetime):
    safe = html_escape(str(row.get("caption_override") or ""))
    caption = (
        f"üëÄ <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä</b>\n"
        f"üïí –ü—É–±–ª–∏–∫–∞—Ü–∏—è: <code>{when_post.strftime('%Y-%m-%d %H:%M')}</code> ({TZ_NAME})\n"
        f"–ò—Å—Ç–æ—á–Ω–∏–∫: <code>{row['source_chat_id']}</code>\n"
        f"Messages: <code>{row['message_ids']}</code>\n\n"
        f"{safe}"
    )
    kb = _preview_keyboard()
    for aid in ADMINS:
        try:
            await bot.send_message(aid, caption, reply_markup=kb, disable_web_page_preview=True)
        except TelegramUnauthorizedError:
            log.warning("–ê–¥–º–∏–Ω %s –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (Unauthorized). –ù–∞–∂–º–∏ /start –±–æ—Ç—É –≤ –õ–°.", aid)
        except Exception as e:
            log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–≤—å—é –∞–¥–º–∏–Ω—É %s: %s", aid, e)

# ----------------- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª -----------------
async def run_scheduler():
    # parse_mode —É–∫–∞–∂–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –ø—Ä–µ–≤—å—é –æ—Ç–∫–ª—é—á–∞–µ–º —Ç–æ—á–µ—á–Ω–æ —Ñ–ª–∞–≥–æ–º disable_web_page_preview
    props = DefaultBotProperties(parse_mode=ParseMode.HTML)
    bot = Bot(BOT_TOKEN, default=props)

    await _notify_admins(bot, f"üïí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.\n–°–ª–æ—Ç—ã: <code>{TIMES_RAW}</code>\n–ü—Ä–µ–≤—å—é –∑–∞: <b>{PREVIEW_BEFORE_MIN}</b> –º–∏–Ω.\n–í –æ—á–µ—Ä–µ–¥–∏: <b>{queue_count_pending()}</b>")

    while True:
        now = _now()
        next_slot = _next_run(now)
        preview_at = next_slot - timedelta(minutes=PREVIEW_BEFORE_MIN)
        if preview_at < now:
            preview_at = now + timedelta(seconds=5)

        # ----- –∂–¥—ë–º –º–æ–º–µ–Ω—Ç –ü–†–ï–í–¨–Æ -----
        delay_preview = max(0.0, (preview_at - _now()).total_seconds())
        await asyncio.sleep(delay_preview)

        row = queue_next_pending()
        if row:
            await send_preview(bot, row, next_slot)
            queue_mark_status(row["id"], "previewed")
            log.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–≤—å—é –¥–ª—è task #%s. –ü–æ—Å—Ç –≤ %s", row["id"], next_slot.strftime("%H:%M"))
        else:
            await _notify_admins(bot, "‚ÑπÔ∏è –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ ‚Äî –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ.")

        # ----- –∂–¥—ë–º –º–æ–º–µ–Ω—Ç –ü–û–°–¢–ê -----
        delay_post = max(0.0, (next_slot - _now()).total_seconds())
        await asyncio.sleep(delay_post)

        row = queue_next_pending()
        if not row:
            log.info("–°–ª–æ—Ç %s: –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.", next_slot.strftime("%H:%M"))
            continue

        # message_ids –º–æ–∂–µ—Ç –ª–µ–∂–∞—Ç—å –∫–∞–∫ JSON-—Å—Ç—Ä–æ–∫–∞
        try:
            message_ids = [int(x) for x in json.loads(row["message_ids"])]
        except Exception:
            # –Ω–∞ —Å–ª—É—á–∞–π —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
            message_ids = [int(x) for x in eval(row["message_ids"])]

        try:
            await copy_and_delete(
                bot=bot,
                source_chat_id=row["source_chat_id"],
                message_ids=message_ids,
                target=CHANNEL_ID,
                caption_override=row.get("caption_override")
            )
            queue_mark_status(row["id"], "posted")
            await _notify_admins(bot, f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∏–∑ <code>{row['source_chat_id']}</code> ‚Äî ids={message_ids}")
            log.info("‚úÖ Posted task #%s", row["id"])
        except Exception as e:
            queue_mark_status(row["id"], "error")
            await _notify_admins(bot, f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ id={row['id']}: <code>{e}</code>")
            log.exception("–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ task #%s: %s", row["id"], e)

async def main():
    init_db()
    log.info("Scheduler  TZ=%s, times=%s, preview_before=%s min", TZ_NAME, TIMES_RAW, PREVIEW_BEFORE_MIN)
    await run_scheduler()

if __name__ == "__main__":
    asyncio.run(main())
