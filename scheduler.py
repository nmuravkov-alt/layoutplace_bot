# scheduler.py
import os
import asyncio
import logging
from datetime import datetime, time, timedelta

import pytz
from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InputMediaPhoto

# ---------- –ò–º–ø–æ—Ä—Ç –∏–∑ –≤–∞—à–µ–π –ë–î ----------
from storage.db import (
    init_db,
    get_oldest,
    delete_by_id,
    find_similar_ids,
    bulk_delete,
)

# ---------- ENV / –ö–æ–Ω—Ñ–∏–≥ ----------
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
CHANNEL_ID = os.getenv("CHANNEL_ID", "").strip()  # @username –∏–ª–∏ numeric id
TZ_NAME = os.getenv("TZ", "Europe/Moscow").strip()

# –í—Ä–µ–º–µ–Ω–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ (–ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–ª—è TZ_NAME). –§–æ—Ä–º–∞—Ç: "12:00,16:00,20:00"
TIMES_RAW = os.getenv("TIMES", "12:00,16:00,20:00")
SLOT_TIMES: list[time] = []
for part in TIMES_RAW.replace(" ", "").split(","):
    try:
        hh, mm = part.split(":")
        SLOT_TIMES.append(time(int(hh), int(mm)))
    except Exception:
        pass
if not SLOT_TIMES:
    SLOT_TIMES = [time(12, 0), time(16, 0), time(20, 0)]

# –ê–¥–º–∏–Ω—ã (user_id —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
ADMINS_RAW = os.getenv("ADMINS", "").strip()
ADMINS: list[int] = []
if ADMINS_RAW:
    for chunk in ADMINS_RAW.replace(" ", "").split(","):
        if not chunk:
            continue
        try:
            ADMINS.append(int(chunk))
        except ValueError:
            # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–µ—Ä–µ–¥–∞–ª–∏ @username ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏–º
            pass

# –ó–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ –ø–æ—Å—Ç–∞ —Å–ª–∞—Ç—å –ø—Ä–µ–≤—å—é
PREVIEW_MIN = int(os.getenv("PREVIEW_MIN", "10"))

# –õ–æ–≥–≥–µ—Ä
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("scheduler")

# TZ
try:
    tz = pytz.timezone(TZ_NAME)
except Exception:
    tz = pytz.timezone("Europe/Moscow")


# ---------- –£—Ç–∏–ª–∏—Ç—ã –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ—Å—Ç–∞ ----------
def _extract_media_urls(item) -> list[str]:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å —Å–ø–∏—Å–æ–∫ URL —Ñ–æ—Ç–æ –∏–∑ –∑–∞–ø–∏—Å–∏ –ë–î.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–ª—é—á–µ–π.
    """
    candidates = []
    # —á–∞—Å—Ç—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª—é—á–µ–π
    for k in ("media", "photos", "images", "pics"):
        v = item.get(k) if isinstance(item, dict) else None
        if v:
            if isinstance(v, list):
                candidates = [str(x) for x in v if x]
            elif isinstance(v, str):
                # –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç—Ä–æ–∫–∞ —Å –∑–∞–ø—è—Ç—ã–º–∏
                pieces = [p.strip() for p in v.split(",") if p.strip()]
                candidates = pieces
            break
    return candidates


def _extract_text(item) -> str:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è.
    """
    # —á–∞—Å—Ç—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª—é—á–µ–π
    for k in ("text", "caption", "body", "content"):
        if isinstance(item, dict) and k in item and item[k]:
            return str(item[k])
    # –µ—Å–ª–∏ item ‚Äî –Ω–µ dict, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if isinstance(item, str):
        return item
    return ""


def build_caption_and_media(item):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      caption: str
      media_list: list[InputMediaPhoto] –∏–ª–∏ []
      first_photo_url: str | None
    """
    caption = _extract_text(item).strip()
    urls = _extract_media_urls(item)

    media_list: list[InputMediaPhoto] = []
    first_photo_url = urls[0] if urls else None

    if urls:
        # –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ ‚Äî –≥–æ—Ç–æ–≤–∏–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
        for i, url in enumerate(urls):
            if i == 0:
                # –ø–æ–¥–ø–∏—Å—å —Å—Ç–∞–≤–∏–º –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (Telegram –ø–æ–∫–∞–∂–µ—Ç –µ—ë –ø–æ–¥ –∞–ª—å–±–æ–º–æ–º)
                media_list.append(InputMediaPhoto(media=url, caption=caption or None, parse_mode="HTML"))
            else:
                media_list.append(InputMediaPhoto(media=url))
    # –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç ‚Äî media_list –±—É–¥–µ—Ç –ø—É—Å—Ç–æ–π, –∑–Ω–∞—á–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
    return caption, media_list, first_photo_url


# ---------- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º ----------
async def notify_admins_preview(bot: Bot, when_dt: datetime, caption: str, first_photo: str | None):
    if not ADMINS:
        return
    header = f"üïí –ß–µ—Ä–µ–∑ {PREVIEW_MIN} –º–∏–Ω. –∞–≤—Ç–æ–ø–æ—Å—Ç ({when_dt:%Y-%m-%d %H:%M} {when_dt.tzname()})\n\n"
    text = header + (caption or "‚Äî –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ ‚Äî")
    for admin_id in ADMINS:
        try:
            if first_photo:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ + –ø–æ–¥–ø–∏—Å—å
                await bot.send_photo(admin_id, first_photo, caption=text, parse_mode="HTML", disable_notification=True)
            else:
                await bot.send_message(admin_id, text, parse_mode="HTML", disable_web_page_preview=True, disable_notification=True)
        except Exception as e:
            log.warning(f"preview to admin {admin_id} failed: {e}")


async def notify_admins_published_copy(bot: Bot, channel_id, sent_result):
    """
    –ö–æ–ø–∏—Ä—É–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –∞–¥–º–∏–Ω–∞–º.
    –ï—Å–ª–∏ –∞–ª—å–±–æ–º ‚Äî –∫–æ–ø–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (—Å –ø–æ–¥–ø–∏—Å—å—é).
    """
    if not ADMINS:
        return

    # sent_result –º–æ–∂–µ—Ç –±—ã—Ç—å list[Message] (media_group) –∏–ª–∏ Message
    if isinstance(sent_result, list) and sent_result:
        msg_id = sent_result[0].message_id
    else:
        msg_id = getattr(sent_result, "message_id", None)

    if not msg_id:
        return

    for admin_id in ADMINS:
        try:
            await bot.copy_message(chat_id=admin_id, from_chat_id=CHANNEL_ID, message_id=msg_id)
        except Exception as e:
            log.warning(f"copy to admin {admin_id} failed: {e}")


# ---------- –í—Ä–µ–º—è –∏ —Å–ª–æ—Ç—ã ----------
def next_slot(now_dt: datetime) -> datetime:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–ª–∏–∂–∞–π—à–∏–π datetime –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ TZ tz.
    """
    # –∫–∞–Ω–¥–∏–¥–∞—Ç—ã —Å–µ–≥–æ–¥–Ω—è
    today = now_dt.date()
    candidates = [tz.localize(datetime.combine(today, t)) for t in SLOT_TIMES]
    for dtc in candidates:
        if dtc > now_dt:
            return dtc
    # –∏–Ω–∞—á–µ ‚Äî –ø–µ—Ä–≤—ã–π —Å–ª–æ—Ç –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
    tomorrow = today + timedelta(days=1)
    return tz.localize(datetime.combine(tomorrow, SLOT_TIMES[0]))


# ---------- –ü—É–±–ª–∏–∫–∞—Ü–∏—è ----------
async def publish_item(bot: Bot, item) -> object | list[object] | None:
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∫–∞–Ω–∞–ª.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç(—ã) Message, –ø—Ä–∏–≥–æ–¥–Ω—ã–µ –¥–ª—è copy_message.
    """
    caption, media, _ = build_caption_and_media(item)

    # –µ—Å–ª–∏ –µ—Å—Ç—å 2+ —Ñ–æ—Ç–æ ‚Äî –ø—É–±–ª–∏–∫—É–µ–º –∞–ª—å–±–æ–º
    if len(media) >= 2:
        try:
            sent = await bot.send_media_group(CHANNEL_ID, media=media)
            return sent
        except Exception as e:
            log.warning(f"send_media_group failed: {e}")

    # –µ—Å–ª–∏ –æ–¥–Ω–æ —Ñ–æ—Ç–æ ‚Äî send_photo
    if len(media) == 1:
        try:
            sent = await bot.send_photo(CHANNEL_ID, media[0].media, caption=caption or None, parse_mode="HTML")
            return sent
        except Exception as e:
            log.warning(f"send_photo failed: {e}")

    # –∏–Ω–∞—á–µ ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
    try:
        sent = await bot.send_message(CHANNEL_ID, caption or " ", parse_mode="HTML", disable_web_page_preview=False)
        return sent
    except Exception as e:
        log.error(f"send_message failed: {e}")
        return None


# ---------- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ----------
async def run_scheduler():
    if not BOT_TOKEN or not CHANNEL_ID:
        raise RuntimeError("BOT_TOKEN / CHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")

    bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))

    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã –ë–î —Å–æ–∑–¥–∞–Ω—ã
    await init_db()

    # –õ–æ–≥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    log.info(f"Scheduler TZ={TZ_NAME}, times={','.join([t.strftime('%H:%M') for t in SLOT_TIMES])}")

    while True:
        now_dt = datetime.now(tz)
        post_dt = next_slot(now_dt)
        eta_sec = (post_dt - now_dt).total_seconds()
        log.info(f"–°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ {eta_sec/3600:.2f} —á–∞—Å–æ–≤ ({post_dt:%Y-%m-%d %H:%M %Z})")

        # ---- PREVIEW ----
        # –µ—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–µ–≤—å—é ‚Äî –ø–æ–¥—Å–º–æ—Ç—Ä–∏–º —Å–∞–º–æ–≥–æ ¬´–∫–∞–Ω–¥–∏–¥–∞—Ç–∞¬ª –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –∞–¥–º–∏–Ω–∞–º
        if eta_sec > PREVIEW_MIN * 60:
            peek = await get_oldest()
            if peek:
                cap, media_list, first_photo = build_caption_and_media(peek)
                try:
                    await notify_admins_preview(bot, post_dt, cap, first_photo)
                except Exception as e:
                    log.warning(f"notify preview failed: {e}")
            else:
                # –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–º –∞–¥–º–∏–Ω–æ–≤
                for admin_id in ADMINS:
                    try:
                        await bot.send_message(admin_id, f"‚ÑπÔ∏è –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ ‚Äî –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ {post_dt:%H:%M} –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—Å—è.")
                    except Exception:
                        pass
            # –°–ø–∏–º –¥–æ –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞, –º–∏–Ω—É—Å ¬´–æ—Å—Ç–∞—Ç–æ–∫¬ª —É–∂–µ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ –ø—Ä–µ–≤—å—é.
            await asyncio.sleep(eta_sec - PREVIEW_MIN * 60)
        else:
            # –ü—Ä—è–º–æ —Å–ø–∏–º –¥–æ —Å–ª–æ—Ç–∞
            await asyncio.sleep(max(0, eta_sec))

        # ---- –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø ----
        try:
            item = await get_oldest()
            if not item:
                log.info("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ ‚Äî –Ω–µ—á–µ–≥–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å.")
                continue

            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è
            sent = await publish_item(bot, item)
            if sent:
                # –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–µ –∞–¥–º–∏–Ω–∞–º
                try:
                    await notify_admins_published_copy(bot, CHANNEL_ID, sent)
                except Exception as e:
                    log.warning(f"notify copy failed: {e}")

                # –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç (–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π)
                try:
                    # id –ø—ã—Ç–∞–µ–º—Å—è –¥–æ—Å—Ç–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ
                    item_id = None
                    if isinstance(item, dict):
                        for k in ("id", "_id", "rowid"):
                            if k in item:
                                item_id = item[k]
                                break
                    if item_id is not None:
                        await delete_by_id(item_id)
                except Exception as e:
                    log.warning(f"delete current failed: {e}")

                # –£–¥–∞–ª–∏—Ç—å –ø–æ—Ö–æ–∂–∏–µ
                try:
                    similar_ids = await find_similar_ids(item)
                    if similar_ids:
                        await bulk_delete(similar_ids)
                except Exception as e:
                    log.warning(f"bulk_delete similar failed: {e}")
            else:
                log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç.")
        except Exception as e:
            log.exception(f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è —É–ø–∞–ª–∞: {e}")
            # –∂–¥—ë–º –º–∏–Ω—É—Ç—É —á—Ç–æ–±—ã –Ω–µ ¬´–∫—Ä—É—Ç–∏—Ç—å—Å—è¬ª –≤ –æ—à–∏–±–∫–µ
            await asyncio.sleep(60)


async def main():
    await run_scheduler()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
