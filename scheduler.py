# scheduler.py
import os
import asyncio
import logging
from datetime import datetime, timedelta, time as dtime
from zoneinfo import ZoneInfo

from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from storage.db import (
    init_db,
    queue_next_pending,
    queue_mark_status,
    queue_count_pending,
)

logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(name)s | %(message)s")
log = logging.getLogger("scheduler")

BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
CHANNEL_ID = os.getenv("CHANNEL_ID", "").strip()  # @username –∏–ª–∏ -100...
ADMINS = [a.strip() for a in os.getenv("ADMINS", "").split(",") if a.strip()]
TZ_NAME = os.getenv("TZ", "Europe/Moscow")
# —á–∞—Å—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
TIMES_RAW = os.getenv("TIMES", "12:00,16:00,20:00")
# –ø—Ä–µ–≤—å—é –∑–∞ N –º–∏–Ω—É—Ç –¥–æ —Å–ª–æ—Ç–∞
PREVIEW_BEFORE_MIN = int(os.getenv("PREVIEW_BEFORE_MIN", "45"))

tz = ZoneInfo(TZ_NAME)

def _parse_times(s: str) -> list[dtime]:
    out = []
    for token in s.split(","):
        token = token.strip()
        if not token:
            continue
        h, m = token.split(":")
        out.append(dtime(hour=int(h), minute=int(m)))
    return out

TIMES = _parse_times(TIMES_RAW)

def _utcnow():
    return datetime.now(tz)

def _next_run(now: datetime, slots: list[dtime]) -> datetime:
    today_slots = [datetime.combine(now.date(), t, tzinfo=tz) for t in slots]
    future = [dt for dt in today_slots if dt > now]
    if future:
        return future[0]
    # –∑–∞–≤—Ç—Ä–∞, —Å–∞–º—ã–π —Ä–∞–Ω–Ω–∏–π —Å–ª–æ—Ç
    tomorrow = now.date() + timedelta(days=1)
    return datetime.combine(tomorrow, slots[0], tzinfo=tz)

async def _notify_admins(bot: Bot, text: str):
    for aid in ADMINS:
        try:
            await bot.send_message(aid, text, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
        except Exception as e:
            log.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É %s: %s", aid, e)

# ---------------- —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ ----------------
def unify_caption(text: str | None) -> str:
    text = (text or "").strip()

    # –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∫–∏
    text = text.replace("–¶–µ–Ω–∞ -", "–¶–µ–Ω–∞ ‚Äî").replace("–¶–µ–Ω–∞ ‚Äî ", "–¶–µ–Ω–∞ ‚Äî ")
    text = text.replace("–†–∞–∑–º–µ—Ä:", "–†–∞–∑–º–µ—Ä:").replace("–°–æ—Å—Ç–æ—è–Ω–∏–µ :", "–°–æ—Å—Ç–æ—è–Ω–∏–µ :").replace("–°–æ—Å—Ç–æ—è–Ω–∏–µ:", "–°–æ—Å—Ç–æ—è–Ω–∏–µ :")
    # —É–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    lines = [ln.strip() for ln in text.splitlines()]
    lines = [ln for ln in lines if ln]
    text = "\n".join(lines)

    # –¥–æ–±–∞–≤–∏–º ¬´–û–±—â–∏–µ¬ª —Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if "layoutplacebuy" not in text:
        text += "\n\n@layoutplacebuy"
    if "#—à—Ç–∞–Ω—ã" in text or "#–∫—É—Ä—Ç–∫–∏" in text or "#–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã" in text:
        # –æ–∫ ‚Äî —Ç–µ–≥–∏ —É–∂–µ –µ—Å—Ç—å
        pass

    return text

# --------------- –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ ---------------
async def copy_and_delete(bot: Bot, source_chat_id: int, message_ids: list[int], target: str | int, caption_override: str | None):
    # –ö–æ–ø–∏—Ä—É–µ–º –ø–∞—á–∫–æ–π –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    posted_message_ids: list[int] = []
    caption = unify_caption(caption_override)
    for idx, mid in enumerate(message_ids):
        try:
            if idx == 0 and caption:
                msg = await bot.copy_message(
                    chat_id=target,
                    from_chat_id=source_chat_id,
                    message_id=mid,
                    caption=caption,
                    parse_mode=ParseMode.HTML
                )
            else:
                msg = await bot.copy_message(
                    chat_id=target,
                    from_chat_id=source_chat_id,
                    message_id=mid
                )
            posted_message_ids.append(msg.message_id)
        except Exception as e:
            log.exception("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è message_id=%s: %s", mid, e)
            raise

    # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—ã (–µ—Å–ª–∏ —É –±–æ—Ç–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∞)
    for mid in message_ids:
        try:
            await bot.delete_message(chat_id=source_chat_id, message_id=mid)
        except Exception:
            # –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ ‚Äî –±—ã–≤–∞–µ—Ç –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            pass

    return posted_message_ids

# ---------------- –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ----------------
async def run_scheduler():
    props = DefaultBotProperties(parse_mode=ParseMode.HTML, disable_web_page_preview=True)
    bot = Bot(BOT_TOKEN, default=props)

    await _notify_admins(bot, f"üïí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.\n–°–ª–æ—Ç—ã: <code>{TIMES_RAW}</code>\n–ü—Ä–µ–≤—å—é: <b>{PREVIEW_BEFORE_MIN}</b> –º–∏–Ω.\n–û—á–µ—Ä–µ–¥—å: <b>{queue_count_pending()}</b>")

    while True:
        now = _utcnow()
        next_slot = _next_run(now, TIMES)
        # –º–æ–º–µ–Ω—Ç –ø—Ä–µ–≤—å—é
        preview_at = next_slot - timedelta(minutes=PREVIEW_BEFORE_MIN)
        if preview_at < now:
            # –µ—Å–ª–∏ ¬´–æ–ø–æ–∑–¥–∞–ª–∏¬ª ‚Äî –ø—Ä–µ–≤—å—é —Å—Ä–∞–∑—É
            preview_at = now + timedelta(seconds=5)

        # –ñ–¥—ë–º –ø—Ä–µ–≤—å—é
        delay_preview = max(0.0, (preview_at - _utcnow()).total_seconds())
        await asyncio.sleep(delay_preview)

        row = queue_next_pending()
        if row:
            # –ø—Ä–µ–≤—å—é –∞–¥–º–∏–Ω—É
            preview_text = (
                f"üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞ {next_slot.strftime('%H:%M')}:\n"
                f"<i>–∏—Å—Ç–æ—á–Ω–∏–∫</i>: <code>{row['source_chat_id']}</code>\n"
                f"<i>messages</i>: <code>{row['message_ids']}</code>"
            )
            await _notify_admins(bot, preview_text)
            queue_mark_status(row["id"], "previewed")
        else:
            await _notify_admins(bot, "‚ÑπÔ∏è –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ ‚Äî –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ.")

        # –ñ–¥—ë–º —Å–∞–º —Å–ª–æ—Ç
        delay_post = max(0.0, (next_slot - _utcnow()).total_seconds())
        await asyncio.sleep(delay_post)

        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è
        row = queue_next_pending()
        if not row:
            log.info("–°–ª–æ—Ç %s: –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞", next_slot)
            continue

        try:
            message_ids = [int(x) for x in eval(row["message_ids"])]
        except Exception:
            import json
            message_ids = [int(x) for x in json.loads(row["message_ids"])]

        try:
            await copy_and_delete(
                bot=bot,
                source_chat_id=int(row["source_chat_id"]),
                message_ids=message_ids,
                target=CHANNEL_ID,
                caption_override=row.get("caption_override")
            )
            queue_mark_status(row["id"], "posted")
            await _notify_admins(bot, f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∏–∑ <code>{row['source_chat_id']}</code> ids={message_ids}")
        except Exception as e:
            queue_mark_status(row["id"], "error")
            await _notify_admins(bot, f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ id={row['id']}: <code>{e}</code>")

async def main():
    init_db()
    log.info("Scheduler  TZ=%s, times=%s, preview_before=%s min", TZ_NAME, TIMES_RAW, PREVIEW_BEFORE_MIN)
    await run_scheduler()

if __name__ == "__main__":
    asyncio.run(main())
